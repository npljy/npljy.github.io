<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端壹菜鸟</title>
  
  <subtitle>关注前端知识，收集精彩博文，做技术的搬运工</subtitle>
  <link href="https://xuehuayu.cn/atom.xml" rel="self"/>
  
  <link href="https://xuehuayu.cn/"/>
  <updated>2025-10-31T10:41:20.268Z</updated>
  <id>https://xuehuayu.cn/</id>
  
  <author>
    <name>搬砖大老</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue3 pinia在App.vue中使用了useStore报错getActivePinia() was called but there wa no active pinia</title>
    <link href="https://xuehuayu.cn/article/ead1a366.html"/>
    <id>https://xuehuayu.cn/article/ead1a366.html</id>
    <published>2025-10-29T23:04:20.000Z</published>
    <updated>2025-10-31T10:41:20.268Z</updated>
    
    <content type="html"><![CDATA[<p>vue3 pinia在App.vue中使用了useStore 报错getActivePinia() was called but there wa no active pinia</p><span id="more"></span><h3 id="事件起因"><a href="#事件起因" class="headerlink" title="事件起因"></a>事件起因</h3><p>因为要在全局<code>axios</code>中使用全局的参数，所以要在封装<code>axios</code>方法中使用<code>pinia</code>的<code>useStore</code>，因为是<code>axios</code>是<code>js/ts</code>文件在<code>import</code>时会立即执行，导致组件尚未加载<code>pinia</code>而提前使用了<code>pinia</code>，所以会报错<code>getActivePinia() was called but there wa no active pinia</code></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在<code>App.vue</code>中使用动态组件，通过判断<code>pinia</code>是否已经创建完成，如果未创建完成则等待<code>pinia</code>创建完成再加载组件。</p><p>App.vue文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineAsyncComponent, getcurrentInstance &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const index = ref(null)</span><br><span class="line">const app = getcurrentInstance()</span><br><span class="line"></span><br><span class="line">const timer = setinterval(() =&gt; &#123;</span><br><span class="line">  if (app?.appContext.config.globalProperties.$pinia) &#123;</span><br><span class="line">    index.value = defineAsyncComponent(() =&gt; import(&#x27;./views/index.vue&#x27;))</span><br><span class="line">    clearInterval(timer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;#app&quot; ref=&quot;app&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;index&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue3 pinia在App.vue中使用了useStore 报错getActivePinia() was called but there wa no active pinia&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="vue3" scheme="https://xuehuayu.cn/tags/vue3/"/>
    
    <category term="ts" scheme="https://xuehuayu.cn/tags/ts/"/>
    
    <category term="pinia" scheme="https://xuehuayu.cn/tags/pinia/"/>
    
    <category term="active pinia" scheme="https://xuehuayu.cn/tags/active-pinia/"/>
    
  </entry>
  
  <entry>
    <title>vue3中的mixin写法使用Composition API 来实现代码复用</title>
    <link href="https://xuehuayu.cn/article/abe47f31.html"/>
    <id>https://xuehuayu.cn/article/abe47f31.html</id>
    <published>2025-10-29T11:23:40.000Z</published>
    <updated>2025-10-31T10:41:20.270Z</updated>
    
    <content type="html"><![CDATA[<p>在 Vue 3 中，虽然依然支持 <strong>Options API 风格的 Mixins</strong>，但更推荐使用 <strong>Composition API</strong> 来实现代码复用，因为它能更好地解决传统 Mixins 在可读性、命名冲突和类型推断方面的一些痛点。</p><p>下面的表格能帮你快速了解这两种方式的主要区别：</p><table><thead><tr><th align="left">特性维度</th><th align="left">Mixins (Options API 风格)</th><th align="left">Composition API (组合式函数)</th></tr></thead><tbody><tr><td align="left"><strong>代码复用方式</strong></td><td align="left">通过选项（<code>data</code>, <code>methods</code> 等）合并</td><td align="left">通过函数调用和返回值</td></tr><tr><td align="left"><strong>可读性</strong></td><td align="left">逻辑分散 across 多个选项，来源不清晰</td><td align="left">逻辑集中，按功能组织</td></tr><tr><td align="left"><strong>命名冲突</strong></td><td align="left">容易发生，需小心处理合并策略</td><td align="left">通过解构重命名，冲突风险低</td></tr><tr><td align="left"><strong>类型支持</strong></td><td align="left">较弱</td><td align="left">对 TypeScript 支持良好</td></tr><tr><td align="left"><strong>灵活性</strong></td><td align="left">相对固定</td><td align="left">高，可以像普通函数一样组合和嵌套</td></tr></tbody></table><h3 id="🍰-传统-Mixins-的写法"><a href="#🍰-传统-Mixins-的写法" class="headerlink" title="🍰 传统 Mixins 的写法"></a>🍰 传统 Mixins 的写法</h3><p>这种方式是将组件的公共逻辑通过选项的形式定义在一个对象中。</p><ol><li><p><strong>定义 Mixin</strong><br> 创建一个独立的文件（例如 <code>useCounterMixin.js</code>），使用 Options API 的风格定义数据和方法：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useCounterMixin.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterMixin = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">mixinCount</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">mixinIncrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mixinCount</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mixin mounted!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在组件中使用</strong><br> 在组件中通过 <code>mixins</code> 选项引入，Vue 会自动合并这些选项。当组件和 Mixin 有<strong>同名属性或方法</strong>时，默认情况下，<strong>组件的选项会覆盖 Mixin 的</strong>。对于<strong>生命周期钩子</strong>，<strong>两者都会被执行，且 Mixin 的钩子先于组件自身的钩子执行</strong>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Count from mixin: &#123;&#123; mixinCount &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;mixinIncrement&quot;&gt;Increment from Mixin&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; useCounterMixin &#125; from &#x27;./useCounterMixin&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mixins: [useCounterMixin],</span><br><span class="line">  // 组件自己的 data、methods 等选项...</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&#x27;Component mounted!&#x27;);</span><br><span class="line">    // 输出顺序：</span><br><span class="line">    // &quot;Mixin mounted!&quot;</span><br><span class="line">    // &quot;Component mounted!&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="💡-使用-Composition-API-实现逻辑复用"><a href="#💡-使用-Composition-API-实现逻辑复用" class="headerlink" title="💡 使用 Composition API 实现逻辑复用"></a>💡 使用 Composition API 实现逻辑复用</h3><p>Composition API 通过“组合式函数”来实现复用，这是一个更符合 JavaScript 原生思维的方式。</p><ol><li><p><strong>创建组合式函数</strong><br> 创建一个函数（通常以 <code>use</code> 开头），在函数内部使用 <code>ref</code>, <code>reactive</code>, <code>computed</code> 等 Composition API 定义响应式数据和逻辑，并返回需要暴露给组件的值。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useCounter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCounter</span>(<span class="params">initialValue = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 响应式状态</span></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(initialValue)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算属性</span></span><br><span class="line">  <span class="keyword">const</span> double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count.<span class="property">value</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生命周期钩子</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Counter composition mounted!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回所有需要使用的数据和方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    double,</span><br><span class="line">    increment</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在组件中使用组合式函数</strong><br> 在组件的 <code>setup()</code> 函数或 <code>&lt;script setup&gt;</code> 语法糖中，调用组合式函数并获取其返回的值。你可以按需重命名，有效避免了命名冲突。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><!-- 使用 <script setup> 语法 --></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Double: &#123;&#123; double &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 导入组合式函数</span><br><span class="line">import &#123; useCounter &#125; from &#x27;./useCounter&#x27;</span><br><span class="line"></span><br><span class="line">// 调用函数，解构返回值</span><br><span class="line">const &#123; count, double, increment &#125; = useCounter(10) // 可以传递初始参数</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="✅-如何选择与最佳实践"><a href="#✅-如何选择与最佳实践" class="headerlink" title="✅ 如何选择与最佳实践"></a>✅ 如何选择与最佳实践</h3><ul><li><p><strong>选择建议</strong>：</p><ul><li>对于新项目或复杂的逻辑复用，<strong>强烈推荐使用 Composition API</strong>。它带来了更好的可维护性和类型支持。</li><li>如果你是在维护一个旧的、主要使用 Options API 的 Vue 2 项目，或者复用的逻辑非常简单，可以继续使用 Mixins。</li></ul></li><li><p><strong>最佳实践</strong>：</p><ul><li><strong>单一职责</strong>：无论是 Mixin 还是组合式函数，都尽量让其只负责一个明确的功能。</li><li><strong>清晰命名</strong>：在 Mixin 中，可以考虑使用特定的前缀来减少命名冲突的风险（例如 <code>mixinCount</code>）。在组合式函数中，则可以利用解构重命名。</li><li><strong>明确依赖</strong>：在组合式函数中，对于需要从外部接收的参数，使用 <code>ref</code> 或 <code>reactive</code> 保持其响应性。</li></ul></li></ul><p>总而言之，Composition API 通过原生 JavaScript 的函数机制进行逻辑组合和复用，提供了比 Mixins 更灵活和可控的方式，是现代 Vue 应用代码复用的首选。</p><p>希望这份讲解能帮助你顺利地在 Vue 3 中实现代码复用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Vue 3 中，虽然依然支持 &lt;strong&gt;Options API 风格的 Mixins&lt;/strong&gt;，但更推荐使用 &lt;strong&gt;Composition API&lt;/strong&gt; 来实现代码复用，因为它能更好地解决传统 Mixins 在可读性、命名冲突和类型推</summary>
      
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="vue3" scheme="https://xuehuayu.cn/tags/vue3/"/>
    
    <category term="Composition" scheme="https://xuehuayu.cn/tags/Composition/"/>
    
    <category term="Mixins" scheme="https://xuehuayu.cn/tags/Mixins/"/>
    
    <category term="setup" scheme="https://xuehuayu.cn/tags/setup/"/>
    
    <category term="options" scheme="https://xuehuayu.cn/tags/options/"/>
    
  </entry>
  
  <entry>
    <title>windows虚拟内存自动管理好还是手动设置好？ 如果是手动设置多少合适？</title>
    <link href="https://xuehuayu.cn/article/cbf3079f.html"/>
    <id>https://xuehuayu.cn/article/cbf3079f.html</id>
    <published>2025-10-29T08:41:30.000Z</published>
    <updated>2025-10-31T10:41:20.271Z</updated>
    
    <content type="html"><![CDATA[<p>对于Windows虚拟内存的设置，<strong>绝大多数普通用户选择“自动管理”是更省心且稳妥的方案</strong>。不过，如果你有非常特定的使用需求，手动设置也能作为优化手段。</p><span id="more"></span><p>为了帮你快速了解两种方式的区别，我准备了下面的表格：</p><table><thead><tr><th align="left">对比维度</th><th align="left">⚙️ 自动管理</th><th align="left">🛠️ 手动设置</th></tr></thead><tbody><tr><td align="left"><strong>工作原理</strong></td><td align="left">系统根据当前负载动态调整虚拟内存大小。</td><td align="left">由你固定初始和最大值，系统不会自动改变。</td></tr><tr><td align="left"><strong>优点</strong></td><td align="left">✅ <strong>简单方便</strong>，无需用户干预<br>✅ <strong>动态适配</strong>，应对不同使用场景<br>✅ <strong>稳定可靠</strong>，微软官方推荐</td><td align="left">✅ <strong>性能稳定</strong>，避免系统频繁调整产生碎片（若设置固定值）<br>✅ <strong>应对特殊需求</strong>，可为特定任务预留足够空间</td></tr><tr><td align="left"><strong>缺点</strong></td><td align="left">❌ 可能不够精确，动态调整偶尔会产生磁盘碎片</td><td align="left">❌ <strong>设置不当有风险</strong>：过小易内存不足，过大会占用磁盘空间且可能因频繁读写拖慢系统</td></tr><tr><td align="left"><strong>适用人群</strong></td><td align="left">绝大多数普通用户、游戏玩家、日常办公者。</td><td align="left">高级用户、专业软件使用者（如运行大型建模、视频编辑），或曾遇到“虚拟内存不足”提示的用户。</td></tr></tbody></table><h3 id="💡-如何选择与手动设置建议"><a href="#💡-如何选择与手动设置建议" class="headerlink" title="💡 如何选择与手动设置建议"></a>💡 如何选择与手动设置建议</h3><p>你可以参考以下流程图，快速判断哪种方式更适合你：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    A[开始选择虚拟内存方案] --&gt; B&#123;你是大多数普通用户吗？&#125;;</span><br><span class="line">    B -- 是 --&gt; C[强烈推荐使用&lt;br&gt;**自动管理**];</span><br><span class="line">    B -- 否&lt;br&gt;（有特殊需求或问题） --&gt; D&#123;是否常遇到&lt;br&gt;虚拟内存不足警告？&#125;;</span><br><span class="line"></span><br><span class="line">    D -- 是 --&gt; E[建议手动设置];</span><br><span class="line">    E --&gt; F[按推荐值的1.5-3倍&lt;br&gt;适当调大虚拟内存];</span><br><span class="line"></span><br><span class="line">    D -- 否 --&gt; G&#123;是否追求专业软件&lt;br&gt;或游戏的极致稳定？&#125;;</span><br><span class="line">    G -- 是 --&gt; H[建议手动设置固定值];</span><br><span class="line">    H --&gt; I[参考推荐值&lt;br&gt;设置为固定大小];</span><br><span class="line"></span><br><span class="line">    G -- 否 --&gt; C;</span><br><span class="line"></span><br><span class="line">    E &amp; H --&gt; J[**手动设置通用建议**&lt;br&gt;初始大小 = 物理内存的1-1.5倍&lt;br&gt;最大值 = 物理内存的1.5-3倍];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果经过判断，你确实需要手动设置，可以参考以下具体步骤和通用建议：</p><ol><li><p><strong>打开设置窗口</strong>：</p><ul><li>右键点击“此电脑”，选择“属性” → “高级系统设置”。</li><li>或直接按 <code>Windows徽标 + R</code> 键，输入 <code>sysdm.cpl</code> 后回车。</li></ul></li><li><p><strong>进行设置</strong>：在“系统属性”窗口中，进入“高级”选项卡，点击“性能”下的“设置” → 再进入“高级”选项卡，点击“虚拟内存”下的“更改…”。</p></li><li><p><strong>手动指定</strong>：</p><ul><li>取消勾选“<strong>自动管理所有驱动器的分页文件大小</strong>”。</li><li>选择你想要设置的驱动器（通常是C盘）。</li><li>选择“<strong>自定义大小</strong>”，分别填写“初始大小”和“最大值”。</li><li>点击“<strong>设置</strong>”按钮，然后“确定”并重启电脑使设置生效。</li></ul></li></ol><p>手动设置的通用建议：</p><ul><li><strong>初始大小</strong>：设置为物理内存的 <strong>1倍到1.5倍</strong>。</li><li><strong>最大值</strong>：设置为物理内存的 <strong>1.5倍到3倍</strong>。</li></ul><blockquote><p>注：例如对于8GB物理内存的电脑，初始大小可设为8192MB，最大值可设为12288MB至24576MB之间。如果你的物理内存更大（如16GB以上），倍数可以取推荐范围中较小的值，甚至1倍即可。</p></blockquote><h3 id="⚠️-注意事项"><a href="#⚠️-注意事项" class="headerlink" title="⚠️ 注意事项"></a>⚠️ 注意事项</h3><ul><li><p><strong>手动设置的风险</strong>：手动设置虚拟内存并非“越大越好”。如果设置得过大，系统会频繁地在物理内存和过大的虚拟内存之间进行数据交换（页面文件操作），由于硬盘速度远慢于内存，这反而会导致系统响应变慢，出现卡顿。</p></li><li><p><strong>SSD用户须知</strong>：对于使用固态硬盘（SSD）的用户，也<strong>建议启用虚拟内存</strong>。虽然SSD速度比机械硬盘快很多，但仍远低于物理内存。启用虚拟内存可以避免因内存不足导致的程序崩溃和系统不稳定。</p></li><li><p><strong>驱动器选择</strong>：建议<strong>优先将虚拟内存设置在SSD上</strong>，因为读写速度快得多。如果只有机械硬盘，可以尝试将其设置在非系统盘、且剩余空间较大的分区上。</p></li></ul><p>希望这份详细的指南能帮助你做出合适的选择。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于Windows虚拟内存的设置，&lt;strong&gt;绝大多数普通用户选择“自动管理”是更省心且稳妥的方案&lt;/strong&gt;。不过，如果你有非常特定的使用需求，手动设置也能作为优化手段。&lt;/p&gt;</summary>
    
    
    
    <category term="系统" scheme="https://xuehuayu.cn/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="System" scheme="https://xuehuayu.cn/categories/%E7%B3%BB%E7%BB%9F/System/"/>
    
    
    <category term="Windows" scheme="https://xuehuayu.cn/tags/Windows/"/>
    
    <category term="虚拟内存" scheme="https://xuehuayu.cn/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    
    <category term="优化" scheme="https://xuehuayu.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>vue3中ts提示扩张参数必须具有元组类型或传递给rest参数</title>
    <link href="https://xuehuayu.cn/article/763d6087.html"/>
    <id>https://xuehuayu.cn/article/763d6087.html</id>
    <published>2025-10-29T08:38:46.000Z</published>
    <updated>2025-10-31T10:41:20.270Z</updated>
    
    <content type="html"><![CDATA[<p>这个错误通常发生在 TypeScript 中，当你尝试使用扩展运算符（spread operator）<code>...</code> 时，TypeScript 检测到类型不匹配。</p><span id="more"></span><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>这个错误表明你正在尝试扩展一个不是元组类型或数组类型的值。</p><h2 id="常见场景和解决方案"><a href="#常见场景和解决方案" class="headerlink" title="常见场景和解决方案"></a>常见场景和解决方案</h2><h3 id="1-函数参数扩展"><a href="#1-函数参数扩展" class="headerlink" title="1. 函数参数扩展"></a>1. 函数参数扩展</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params">...args: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params">...args: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exampleTuple</span>(<span class="params">...args: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-数组-元组合并"><a href="#2-数组-元组合并" class="headerlink" title="2. 数组&#x2F;元组合并"></a>2. 数组&#x2F;元组合并</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">tuple</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> arr = [...tuple]; <span class="comment">// 如果 tuple 类型定义错误会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">tuple</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> arr = [...tuple]; <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用数组</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">numbers</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = [...numbers];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-对象扩展"><a href="#3-对象扩展" class="headerlink" title="3. 对象扩展"></a>3. 对象扩展</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象扩展通常不会出现这个错误</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; ...obj1, <span class="attr">c</span>: <span class="number">3</span> &#125;; <span class="comment">// 正确</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-React-组件-props-扩展"><a href="#4-React-组件-props-扩展" class="headerlink" title="4. React 组件 props 扩展"></a>4. React 组件 props 扩展</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 组件示例</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ButtonProps</span> &#123;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params">props: ButtonProps</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用 React 的类型</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ButtonHTMLAttributes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params">props: ButtonHTMLAttributes&lt;HTMLButtonElement&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-泛型约束"><a href="#5-泛型约束" class="headerlink" title="5. 泛型约束"></a>5. 泛型约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用泛型约束确保可迭代</span></span><br><span class="line"><span class="keyword">function</span> mergeArrays&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt;(...<span class="attr">arrays</span>: T[]): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arrays.<span class="title function_">flat</span>() <span class="keyword">as</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><ol><li><strong>检查类型定义</strong>：确保你扩展的值有正确的数组或元组类型</li><li><strong>使用类型断言</strong>（谨慎使用）： <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = someValue <span class="keyword">as</span> <span class="built_in">any</span>[];</span><br><span class="line"><span class="keyword">const</span> result = [...value];</span><br></pre></td></tr></table></figure></li><li><strong>检查第三方库类型</strong>：某些库可能需要安装对应的类型定义</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个错误通常发生在 TypeScript 中，当你尝试使用扩展运算符（spread operator）&lt;code&gt;...&lt;/code&gt; 时，TypeScript 检测到类型不匹配。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="vue3" scheme="https://xuehuayu.cn/tags/vue3/"/>
    
    <category term="ts" scheme="https://xuehuayu.cn/tags/ts/"/>
    
    <category term="Vetur" scheme="https://xuehuayu.cn/tags/Vetur/"/>
    
    <category term="Volar" scheme="https://xuehuayu.cn/tags/Volar/"/>
    
    <category term="default export" scheme="https://xuehuayu.cn/tags/default-export/"/>
    
    <category term="spread" scheme="https://xuehuayu.cn/tags/spread/"/>
    
  </entry>
  
  <entry>
    <title>vue3 组件 has no default export</title>
    <link href="https://xuehuayu.cn/article/2f775138.html"/>
    <id>https://xuehuayu.cn/article/2f775138.html</id>
    <published>2025-10-29T08:35:35.000Z</published>
    <updated>2025-10-31T10:41:20.269Z</updated>
    
    <content type="html"><![CDATA[<p>在 Vue 3 项目中遇到 “has no default export” 的提示，通常不是因为你的代码写错了，而是由于 <strong>VSCode 的 Vue 扩展 <code>Vetur</code> 对 Vue 3 和 <code>&lt;script setup&gt;</code> 语法支持不完善</strong>导致的。</p><span id="more"></span><p>别担心，这里有几个解决方法，你可以根据情况尝试。</p><h3 id="推荐的解决方案-🥇"><a href="#推荐的解决方案-🥇" class="headerlink" title="推荐的解决方案 🥇"></a>推荐的解决方案 🥇</h3><p>最彻底和推荐的方法是<strong>更换 VSCode 插件</strong>。</p><ol><li><strong>禁用或卸载 <code>Vetur</code></strong>：在 VSCode 的扩展面板中，找到 Vetur 并将其禁用或直接卸载。</li><li><strong>安装 <code>Volar</code></strong>：在 VSCode 扩展商店中搜索并安装 <code>Vue Language Features (Volar)</code>。这是 Vue 官方团队推荐的新一代 Vue 工具插件，完美支持 Vue 3、TypeScript 和 <code>&lt;script setup&gt;</code> 语法。</li><li><strong>重启 VSCode</strong>：完成上述操作后，重启 VSCode，错误提示应该就会消失。</li></ol><blockquote><p>注：如果你在使用 TypeScript，建议同时安装 <code>TypeScript Vue Plugin</code> 插件，它可以更好地支持在 <code>.ts</code> 文件中导入 <code>.vue</code> 组件。</p></blockquote><h3 id="其他备选方案"><a href="#其他备选方案" class="headerlink" title="其他备选方案"></a>其他备选方案</h3><p>如果上述方法不适用，你可以考虑以下选择：</p><ul><li><p><strong>临时配置 Vetur</strong>：如果暂时不想卸载 Vetur，可以在 VSCode 的设置中（<code>settings.json</code>）添加以下配置来关闭 Vetur 的脚本验证：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;vetur.validation.script&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这只是消除了错误提示，并未从根本上解决问题。</p></blockquote></li><li><p><strong>检查模块导出类型（针对JS&#x2F;TS库）</strong>：如果你在导入一个非 Vue 组件的 JavaScript&#x2F;TypeScript 库时遇到类似错误（例如 <code>&quot;default&quot; is not exported by ...</code>），这表示该库可能没有使用 <code>export default</code> 语法。这时，你需要根据该库提供的导出方式，使用<strong>命名导入</strong>而非默认导入。</p><p><strong>默认导入</strong>（可能导致错误）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myLib <span class="keyword">from</span> <span class="string">&#x27;my-library&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>命名导入</strong>（可能为正确方式）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; myFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;my-library&#x27;</span>;</span><br></pre></td></tr></table></figure><p>具体应使用哪种方式，请查阅该库的官方文档。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>大多数情况下，”has no default export” 的提示通过 <strong>用 Volar 替换 Vetur 即可解决</strong>。这个方案也是 Vue 作者尤雨溪所推荐的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Vue 3 项目中遇到 “has no default export” 的提示，通常不是因为你的代码写错了，而是由于 &lt;strong&gt;VSCode 的 Vue 扩展 &lt;code&gt;Vetur&lt;/code&gt; 对 Vue 3 和 &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; 语法支持不完善&lt;/strong&gt;导致的。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="vue3" scheme="https://xuehuayu.cn/tags/vue3/"/>
    
    <category term="ts" scheme="https://xuehuayu.cn/tags/ts/"/>
    
    <category term="Vetur" scheme="https://xuehuayu.cn/tags/Vetur/"/>
    
    <category term="Volar" scheme="https://xuehuayu.cn/tags/Volar/"/>
    
    <category term="default export" scheme="https://xuehuayu.cn/tags/default-export/"/>
    
  </entry>
  
  <entry>
    <title>js es6 class 类中的值是异步赋值， 子类中如何获取这个值？</title>
    <link href="https://xuehuayu.cn/article/37e1f99c.html"/>
    <id>https://xuehuayu.cn/article/37e1f99c.html</id>
    <published>2025-10-29T08:32:57.000Z</published>
    <updated>2025-10-31T10:41:20.268Z</updated>
    
    <content type="html"><![CDATA[<p>在 ES6 类中，如果父类的属性是通过<strong>异步赋值</strong>的，子类能否获取到这个值取决于<strong>访问时机</strong>。下面通过代码示例详细说明：</p><span id="more"></span><h2 id="1-同步-vs-异步赋值的区别"><a href="#1-同步-vs-异步赋值的区别" class="headerlink" title="1. 同步 vs 异步赋值的区别"></a>1. 同步 vs 异步赋值的区别</h2><h3 id="同步赋值（正常情况）"><a href="#同步赋值（正常情况）" class="headerlink" title="同步赋值（正常情况）"></a>同步赋值（正常情况）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">syncValue</span> = <span class="string">&#x27;同步值&#x27;</span>; <span class="comment">// 同步赋值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">getValues</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">syncValue</span>: <span class="variable language_">this</span>.<span class="property">syncValue</span> <span class="comment">// 可以正常获取</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="title function_">getValues</span>()); <span class="comment">// &#123; syncValue: &#x27;同步值&#x27; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异步赋值的情况"><a href="#异步赋值的情况" class="headerlink" title="异步赋值的情况"></a>异步赋值的情况</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">asyncValue</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 异步赋值</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">asyncValue</span> = <span class="string">&#x27;异步赋值完成&#x27;</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">getValues</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">asyncValue</span>: <span class="variable language_">this</span>.<span class="property">asyncValue</span> <span class="comment">// ❌ 立即访问可能为 null</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="title function_">getValues</span>()); <span class="comment">// &#123; asyncValue: null &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1秒后再访问</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="title function_">getValues</span>()); <span class="comment">// &#123; asyncValue: &#x27;异步赋值完成&#x27; &#125;</span></span><br><span class="line">&#125;, <span class="number">1500</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><h3 id="方案-1：使用-Promise-管理异步状态"><a href="#方案-1：使用-Promise-管理异步状态" class="headerlink" title="方案 1：使用 Promise 管理异步状态"></a>方案 1：使用 Promise 管理异步状态</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">asyncValue</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">valueReady</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">asyncValue</span> = <span class="string">&#x27;异步赋值完成&#x27;</span>;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">asyncValue</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getValues</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 等待异步赋值完成</span></span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">valueReady</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">asyncValue</span>: <span class="variable language_">this</span>.<span class="property">asyncValue</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child.<span class="title function_">getValues</span>().<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// &#123; asyncValue: &#x27;异步赋值完成&#x27; &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方案-2：使用-async-await-模式"><a href="#方案-2：使用-async-await-模式" class="headerlink" title="方案 2：使用 async&#x2F;await 模式"></a>方案 2：使用 async&#x2F;await 模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">initialized</span> = <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟异步操作</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">asyncValue</span> = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;异步值&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">ensureInitialized</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">initialized</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getAsyncValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">ensureInitialized</span>(); <span class="comment">// 等待父类初始化完成</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">asyncValue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child.<span class="title function_">getAsyncValue</span>().<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &#x27;异步值&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方案-3：事件驱动模式"><a href="#方案-3：事件驱动模式" class="headerlink" title="方案 3：事件驱动模式"></a>方案 3：事件驱动模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">asyncValue</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">asyncValue</span> = <span class="string">&#x27;异步值&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">asyncValue</span>));</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onValueReady</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">asyncValue</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">asyncValue</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">push</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">getValue</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">onValueReady</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">callback</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child.<span class="title function_">getValue</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &#x27;异步值&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-实际应用场景"><a href="#3-实际应用场景" class="headerlink" title="3. 实际应用场景"></a>3. 实际应用场景</h2><h3 id="异步数据获取"><a href="#异步数据获取" class="headerlink" title="异步数据获取"></a>异步数据获取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ApiService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userData</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">initialized</span> = <span class="variable language_">this</span>.<span class="title function_">fetchUserData</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetchUserData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟 API 调用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userData</span> = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/user&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">ensureReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">initialized</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ApiService</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getUserProfile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">ensureReady</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">userData</span>.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="variable language_">this</span>.<span class="property">userData</span>.<span class="property">email</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>子类可以获取父类的异步赋值</strong>，但必须在<strong>异步操作完成后</strong></li><li>立即访问可能得到 <code>null</code> 或初始值</li><li>推荐使用 <strong>Promise</strong> 或 <strong>async&#x2F;await</strong> 来管理异步状态</li><li>通过等待初始化完成的方法确保数据可用性</li><li>事件监听模式适合需要实时响应的场景</li></ul><p>关键在于<strong>时序控制</strong> - 确保在访问异步值之前，相关的异步操作已经完成。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 ES6 类中，如果父类的属性是通过&lt;strong&gt;异步赋值&lt;/strong&gt;的，子类能否获取到这个值取决于&lt;strong&gt;访问时机&lt;/strong&gt;。下面通过代码示例详细说明：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="Class" scheme="https://xuehuayu.cn/tags/Class/"/>
    
    <category term="父类" scheme="https://xuehuayu.cn/tags/%E7%88%B6%E7%B1%BB/"/>
    
    <category term="子类" scheme="https://xuehuayu.cn/tags/%E5%AD%90%E7%B1%BB/"/>
    
    <category term="异步" scheme="https://xuehuayu.cn/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>三岁孩子不给看电视就不吃饭怎么办</title>
    <link href="https://xuehuayu.cn/article/332cad3d.html"/>
    <id>https://xuehuayu.cn/article/332cad3d.html</id>
    <published>2025-10-27T10:45:32.000Z</published>
    <updated>2025-10-31T10:41:20.267Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个非常常见且让很多家长头疼的问题。三岁的孩子正处于自主意识萌发的阶段，用不吃饭来“要挟”看电视，或者因为习惯了电视伴饭而失去自主进食的兴趣，都是典型的表现。</p><span id="more"></span><p>首先，请理解并坚定一个核心原则：<strong>吃饭和看电视是两件独立的事情，不应该被捆绑在一起。</strong> 用看电视换来的一时安静吃饭，长远来看会带来更多问题，如消化不良、注意力不集中、自主进食能力缺失等。</p><p>以下是针对“不看电视不吃饭”这个问题的详细解决步骤和策略，请您耐心并坚持执行：</p><h3 id="第一步：立即行动——建立清晰的规则"><a href="#第一步：立即行动——建立清晰的规则" class="headerlink" title="第一步：立即行动——建立清晰的规则"></a>第一步：立即行动——建立清晰的规则</h3><ol><li><strong>全家统一立场，坚决执行</strong>：所有家庭成员（包括爷爷奶奶&#x2F;外公外婆）必须达成一致，从今天起，吃饭时间绝不开电视。这是成功的关键。</li><li><strong>温和而坚定地告知孩子</strong>：用简单直接的语言告诉孩子新规则。“宝宝，从今天开始，我们吃饭的时候要关掉电视了。吃完饭，我们再看一会儿。” 无论他如何哭闹，都要保持平静，重复规则。</li><li><strong>做好心理准备，接受暂时的“饥饿”</strong>：在改变初期，孩子很可能会因为愿望未被满足而拒绝吃饭。这是最考验家长的时刻。请相信，<strong>一两顿吃不饱，不会影响孩子的健康</strong>，但这是他学习规则必须经历的过程。他会明白，哭闹无法改变规则。</li></ol><h3 id="第二步：长期策略——让吃饭变得有吸引力"><a href="#第二步：长期策略——让吃饭变得有吸引力" class="headerlink" title="第二步：长期策略——让吃饭变得有吸引力"></a>第二步：长期策略——让吃饭变得有吸引力</h3><p>当拿走了“电视”这个外部刺激后，我们需要让“吃饭”本身变得有趣，重新激发孩子内在的进食欲望。</p><ol><li><p><strong>让孩子参与过程</strong>：</p><ul><li><strong>一起准备食材</strong>：带他一起去买菜，让他挑选喜欢的蔬菜（比如“我们今天买这个红色的番茄还是绿色的黄瓜？”）。</li><li><strong>简单参与烹饪</strong>：让他洗菜、递东西、摆碗筷。他会对自己参与制作的食物更有兴趣。</li><li><strong>赋予选择权</strong>：提供有限的健康选择，比如“你想用小狗碗还是小熊碗吃饭？”“你想先吃胡萝卜还是西兰花？”这能满足他的自主感。</li></ul></li><li><p><strong>打造愉快的进餐氛围</strong>：</p><ul><li><strong>固定时间和地点</strong>：在餐桌上吃饭，形成仪式感。全家尽量一起吃饭，创造轻松聊天的氛围，而不是只盯着孩子。</li><li><strong>让食物变得有趣</strong>：把食物做成可爱的造型，比如饭团做成小熊、胡萝卜切成星星。使用色彩鲜艳的餐盘。</li><li><strong>正面描述食物</strong>：用生动的语言描述食物，“这个土豆泥像不像云朵？”“听，咬黄瓜的声音多清脆！” 避免说“这个有营养，快吃”这种说教语言。</li></ul></li><li><p><strong>管理零食和奶量</strong>：</p><ul><li>严格控制正餐之间的零食，尤其是饭前1-2小时内不要给任何零食、果汁或牛奶。</li><li>确保奶是辅食，而不是主食。三岁孩子每日奶量建议在360-480ml左右，过多会影响正餐食欲。</li></ul></li></ol><h3 id="第三步：应对哭闹和拒食的“战术”"><a href="#第三步：应对哭闹和拒食的“战术”" class="headerlink" title="第三步：应对哭闹和拒食的“战术”"></a>第三步：应对哭闹和拒食的“战术”</h3><p>当规则建立初期，孩子哭闹时，你可以这样做：</p><ol><li><p><strong>共情，但不妥协</strong>：“妈妈知道你想看电视，不能看电视让你很难过。我们可以先吃完饭，再一起看一集你最喜欢的动画片。” 承认他的情绪，但坚持原则。</p></li><li><p><strong>设定“饭后节目”</strong>：承诺饭后可以有短暂的亲子活动，比如看15分钟电视、读一本绘本或玩一个游戏。这给了他一个期待，并且让他知道“吃饭”是进行下一件有趣事情的必经步骤。</p></li><li><p><strong>“不催促、不强迫、不贿赂”</strong>：</p><ul><li><strong>不催促</strong>：规定一个合理的进餐时间（比如30分钟），时间到了就平静地收走饭菜。</li><li><strong>不强迫</strong>：不要追着喂，也不要因为他不吃就生气打骂。把吃饭的责任还给孩子。</li><li><strong>不贿赂</strong>：避免说“你吃完这口，我就给你糖吃”。这会让吃饭变成一场交易。</li></ul></li><li><p><strong>利用“同伴效应”</strong>：</p><ul><li>如果有可能，多邀请小朋友来家里一起吃饭，孩子们在一起吃饭会更有竞争和模仿的乐趣。</li><li>家长自己要做出吃得津津有味的样子。</li></ul></li></ol><h3 id="总结与提醒"><a href="#总结与提醒" class="headerlink" title="总结与提醒"></a>总结与提醒</h3><ul><li><strong>一致性是关键</strong>：今天不让看，明天心软又让看，规则就彻底失效了，下次纠正会更难。</li><li><strong>耐心，耐心，再耐心</strong>：改变一个习惯需要时间，可能是几天，也可能是一两周。请给您的孩子和自己足够的时间来适应。</li><li><strong>相信孩子的本能</strong>：健康的孩子不会让自己长期挨饿。当他发现哭闹无用，且饭桌上的食物越来越有趣时，他会重新开始吃饭。</li></ul><p>这个过程对家长来说是巨大的考验，但为了孩子养成终身受益的良好饮食习惯，前期的辛苦是完全值得的。当孩子最终能坐在餐桌上，专注于食物本身，并享受和家人共度的时光时，您会感谢现在坚定的自己。</p><p><strong>如果孩子长期食欲不振，且伴有生长发育迟缓、精神萎靡等症状，建议咨询儿科医生，排除生理性病变的可能。</strong></p><p>希望这些信息能帮助您。如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一个非常常见且让很多家长头疼的问题。三岁的孩子正处于自主意识萌发的阶段，用不吃饭来“要挟”看电视，或者因为习惯了电视伴饭而失去自主进食的兴趣，都是典型的表现。&lt;/p&gt;</summary>
    
    
    
    <category term="儿童" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/"/>
    
    <category term="健康" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/"/>
    
    <category term="children" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/children/"/>
    
    <category term="health" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/children/health/"/>
    
    
    <category term="儿童" scheme="https://xuehuayu.cn/tags/%E5%84%BF%E7%AB%A5/"/>
    
    <category term="三岁" scheme="https://xuehuayu.cn/tags/%E4%B8%89%E5%B2%81/"/>
    
    <category term="看电视" scheme="https://xuehuayu.cn/tags/%E7%9C%8B%E7%94%B5%E8%A7%86/"/>
    
    <category term="不吃饭" scheme="https://xuehuayu.cn/tags/%E4%B8%8D%E5%90%83%E9%A5%AD/"/>
    
  </entry>
  
  <entry>
    <title>js中Map和对象{}的区别</title>
    <link href="https://xuehuayu.cn/article/80fad23d.html"/>
    <id>https://xuehuayu.cn/article/80fad23d.html</id>
    <published>2025-10-24T18:21:54.000Z</published>
    <updated>2025-10-31T10:41:20.266Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>new Map</code> 和普通对象 <code>{}</code> 都是键值对集合，但它们有重要区别：</p><span id="more"></span><h2 id="1-键的类型"><a href="#1-键的类型" class="headerlink" title="1. 键的类型"></a>1. 键的类型</h2><h3 id="Map-键可以是任意类型"><a href="#Map-键可以是任意类型" class="headerlink" title="Map - 键可以是任意类型"></a>Map - 键可以是任意类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各种类型的键都可以</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;字符串键&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">123</span>, <span class="string">&#x27;数字键&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="literal">true</span>, <span class="string">&#x27;布尔键&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(&#123;&#125;, <span class="string">&#x27;对象键&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>([], <span class="string">&#x27;数组键&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;, <span class="string">&#x27;函数键&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="number">123</span>)); <span class="comment">// &#x27;数字键&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象-键只能是字符串或-Symbol"><a href="#对象-键只能是字符串或-Symbol" class="headerlink" title="对象 - 键只能是字符串或 Symbol"></a>对象 - 键只能是字符串或 Symbol</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj[<span class="string">&#x27;string&#x27;</span>] = <span class="string">&#x27;字符串键&#x27;</span>; <span class="comment">// ✅</span></span><br><span class="line">obj[<span class="number">123</span>] = <span class="string">&#x27;数字键&#x27;</span>; <span class="comment">// 会被转换为字符串 &quot;123&quot;</span></span><br><span class="line">obj[&#123;&#125;] = <span class="string">&#x27;对象键&#x27;</span>; <span class="comment">// 键会被转换为 &quot;[object Object]&quot;</span></span><br><span class="line">obj[[<span class="number">1</span>,<span class="number">2</span>]] = <span class="string">&#x27;数组键&#x27;</span>; <span class="comment">// 键会被转换为 &quot;1,2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">// &#123; &quot;123&quot;: &quot;数字键&quot;, &quot;string&quot;: &quot;字符串键&quot;, &quot;[object Object]&quot;: &quot;对象键&quot;, &quot;1,2&quot;: &quot;数组键&quot; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-顺序保证"><a href="#2-顺序保证" class="headerlink" title="2. 顺序保证"></a>2. 顺序保证</h2><h3 id="Map-保持插入顺序"><a href="#Map-保持插入顺序" class="headerlink" title="Map - 保持插入顺序"></a>Map - 保持插入顺序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;z&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;m&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历时保持插入顺序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// z, a, m (插入顺序)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象-不保证顺序（现代JS有改进但仍有差异）"><a href="#对象-不保证顺序（现代JS有改进但仍有差异）" class="headerlink" title="对象 - 不保证顺序（现代JS有改进但仍有差异）"></a>对象 - 不保证顺序（现代JS有改进但仍有差异）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">z</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">m</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现代JS中字符串键通常按创建顺序，但有特殊情况</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// 顺序可能因JS引擎而异</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-大小获取"><a href="#3-大小获取" class="headerlink" title="3. 大小获取"></a>3. 大小获取</h2><h3 id="Map-有-size-属性"><a href="#Map-有-size-属性" class="headerlink" title="Map - 有 size 属性"></a>Map - 有 size 属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象-需要手动计算"><a href="#对象-需要手动计算" class="headerlink" title="对象 - 需要手动计算"></a>对象 - 需要手动计算</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-性能差异"><a href="#4-性能差异" class="headerlink" title="4. 性能差异"></a>4. 性能差异</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map 在频繁增删时性能更好</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加大量数据测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;Map添加&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    map.<span class="title function_">set</span>(i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;Map添加&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;对象添加&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    obj[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;对象添加&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-方法和特性对比"><a href="#5-方法和特性对比" class="headerlink" title="5. 方法和特性对比"></a>5. 方法和特性对比</h2><h3 id="Map-方法"><a href="#Map-方法" class="headerlink" title="Map 方法"></a>Map 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>); <span class="comment">// 设置</span></span><br><span class="line">map.<span class="title function_">get</span>(<span class="string">&#x27;key&#x27;</span>); <span class="comment">// 获取</span></span><br><span class="line">map.<span class="title function_">has</span>(<span class="string">&#x27;key&#x27;</span>); <span class="comment">// 检查存在</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&#x27;key&#x27;</span>); <span class="comment">// 删除</span></span><br><span class="line">map.<span class="title function_">clear</span>(); <span class="comment">// 清空</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;&#125;); <span class="comment">// 遍历</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">key</span> = <span class="string">&#x27;value&#x27;</span>; <span class="comment">// 设置</span></span><br><span class="line">obj.<span class="property">key</span>; <span class="comment">// 获取</span></span><br><span class="line"><span class="string">&#x27;key&#x27;</span> <span class="keyword">in</span> obj; <span class="comment">// 检查存在</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">key</span>; <span class="comment">// 删除</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;&#125;); <span class="comment">// 遍历</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-原型链问题"><a href="#6-原型链问题" class="headerlink" title="6. 原型链问题"></a>6. 原型链问题</h2><h3 id="Map-没有原型链干扰"><a href="#Map-没有原型链干扰" class="headerlink" title="Map - 没有原型链干扰"></a>Map - 没有原型链干扰</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;toString&#x27;</span>)); <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象-有原型链"><a href="#对象-有原型链" class="headerlink" title="对象 - 有原型链"></a>对象 - 有原型链</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">toString</span>); <span class="comment">// ƒ toString() &#123; [native code] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全创建无原型对象</span></span><br><span class="line"><span class="keyword">const</span> safeObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(safeObj.<span class="property">toString</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-序列化"><a href="#7-序列化" class="headerlink" title="7. 序列化"></a>7. 序列化</h2><h3 id="对象-可-JSON-序列化"><a href="#对象-可-JSON-序列化" class="headerlink" title="对象 - 可 JSON 序列化"></a>对象 - 可 JSON 序列化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)); <span class="comment">// &#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Map-不能直接序列化"><a href="#Map-不能直接序列化" class="headerlink" title="Map - 不能直接序列化"></a>Map - 不能直接序列化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(map)); <span class="comment">// &#x27;&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...map])); <span class="comment">// &#x27;[[&quot;a&quot;,1],[&quot;b&quot;,2]]&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-使用场景总结"><a href="#8-使用场景总结" class="headerlink" title="8. 使用场景总结"></a>8. 使用场景总结</h2><h3 id="使用-Map-的情况："><a href="#使用-Map-的情况：" class="headerlink" title="使用 Map 的情况："></a>使用 Map 的情况：</h3><ul><li>键类型多样（对象、函数等作为键）</li><li>需要频繁增删键值对</li><li>需要保持插入顺序</li><li>大数据量操作</li></ul><h3 id="使用对象的情况："><a href="#使用对象的情况：" class="headerlink" title="使用对象的情况："></a>使用对象的情况：</h3><ul><li>键都是字符串或 Symbol</li><li>需要 JSON 序列化</li><li>简单的配置、数据存储</li><li>方法和属性的集合</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map 适合的场景</span></span><br><span class="line"><span class="keyword">const</span> userSessions = <span class="keyword">new</span> <span class="title class_">Map</span>(); <span class="comment">// 用户会话存储，键是用户对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象适合的场景</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">apiUrl</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">retryCount</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>选择依据：如果需要复杂键或高性能操作，用 Map；如果是简单数据结构，用对象。</p><p>希望这些信息能帮助您。如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 JavaScript 中，&lt;code&gt;new Map&lt;/code&gt; 和普通对象 &lt;code&gt;{}&lt;/code&gt; 都是键值对集合，但它们有重要区别：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="对象" scheme="https://xuehuayu.cn/tags/%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="Map" scheme="https://xuehuayu.cn/tags/Map/"/>
    
    <category term="集合" scheme="https://xuehuayu.cn/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Husky 在前端项目中的使用指南</title>
    <link href="https://xuehuayu.cn/article/e36b137f.html"/>
    <id>https://xuehuayu.cn/article/e36b137f.html</id>
    <published>2025-10-23T11:41:03.000Z</published>
    <updated>2025-10-31T10:41:20.261Z</updated>
    
    <content type="html"><![CDATA[<p>Husky 是一个 Git hooks 工具，可以让我们在 Git 操作的特定阶段（如提交前、推送前）自动执行脚本，常用于代码质量检查、测试运行等。</p><span id="more"></span><h2 id="安装与配置-Husky"><a href="#安装与配置-Husky" class="headerlink" title="安装与配置 Husky"></a>安装与配置 Husky</h2><h3 id="1-安装-Husky"><a href="#1-安装-Husky" class="headerlink" title="1. 安装 Husky"></a>1. 安装 Husky</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 npm</span></span><br><span class="line">npm install husky --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 yarn</span></span><br><span class="line">yarn add husky --dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 pnpm</span></span><br><span class="line">pnpm add husky -D</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-启用-Git-hooks"><a href="#2-启用-Git-hooks" class="headerlink" title="2. 启用 Git hooks"></a>2. 启用 Git hooks</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化 Husky</span></span><br><span class="line">npx husky init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者手动创建 .husky 目录</span></span><br><span class="line">npm pkg <span class="built_in">set</span> scripts.prepare=<span class="string">&quot;husky install&quot;</span></span><br><span class="line">npm run prepare</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-添加-hooks"><a href="#3-添加-hooks" class="headerlink" title="3. 添加 hooks"></a>3. 添加 hooks</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 pre-commit hook</span></span><br><span class="line">npx husky add .husky/pre-commit <span class="string">&quot;npm test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 commit-msg hook</span></span><br><span class="line">npx husky add .husky/commit-msg <span class="string">&#x27;npx --no -- commitlint --edit &quot;$1&quot;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常用配置示例"><a href="#常用配置示例" class="headerlink" title="常用配置示例"></a>常用配置示例</h2><h3 id="1-Pre-commit-钩子配置"><a href="#1-Pre-commit-钩子配置" class="headerlink" title="1. Pre-commit 钩子配置"></a>1. Pre-commit 钩子配置</h3><p>在 <code>.husky/pre-commit</code> 文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 lint 检查</span></span><br><span class="line">npm run lint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查代码格式</span></span><br><span class="line">npm run format:check</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Commit-msg-钩子配置"><a href="#2-Commit-msg-钩子配置" class="headerlink" title="2. Commit-msg 钩子配置"></a>2. Commit-msg 钩子配置</h3><p>在 <code>.husky/commit-msg</code> 文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 commitlint 检查提交信息格式</span></span><br><span class="line">npx --no -- commitlint --edit <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-Pre-push-钩子配置"><a href="#3-Pre-push-钩子配置" class="headerlink" title="3. Pre-push 钩子配置"></a>3. Pre-push 钩子配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在推送前运行完整测试</span></span><br><span class="line">npm run <span class="built_in">test</span>:ci</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配合其他工具使用"><a href="#配合其他工具使用" class="headerlink" title="配合其他工具使用"></a>配合其他工具使用</h2><h3 id="1-配合-ESLint"><a href="#1-配合-ESLint" class="headerlink" title="1. 配合 ESLint"></a>1. 配合 ESLint</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pre-commit 文件内容</span></span><br><span class="line">npm run lint:fix</span><br><span class="line">git add .</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-配合-Prettier"><a href="#2-配合-Prettier" class="headerlink" title="2. 配合 Prettier"></a>2. 配合 Prettier</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pre-commit 文件内容</span></span><br><span class="line">npm run format</span><br><span class="line">git add .</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-配合-lint-staged"><a href="#3-配合-lint-staged" class="headerlink" title="3. 配合 lint-staged"></a>3. 配合 lint-staged</h3><p>首先安装 lint-staged：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install lint-staged --save-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在 <code>package.json</code> 中配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;eslint --fix&quot;</span><span class="punctuation">,</span> <span class="string">&quot;prettier --write&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;json,md,html,css,scss&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;prettier --write&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 <code>.husky/pre-commit</code> 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npx lint-staged</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="完整配置示例"><a href="#完整配置示例" class="headerlink" title="完整配置示例"></a>完整配置示例</h2><h3 id="package-json-配置"><a href="#package-json-配置" class="headerlink" title="package.json 配置"></a>package.json 配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint . --ext .js,.jsx,.ts,.tsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint:fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint . --ext .js,.jsx,.ts,.tsx --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write .&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format:check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --check .&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:ci&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --ci --coverage&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^29.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;eslint --fix&quot;</span><span class="punctuation">,</span> <span class="string">&quot;prettier --write&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;json,md,html,css,scss,yml&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;prettier --write&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="husky-目录结构"><a href="#husky-目录结构" class="headerlink" title=".husky 目录结构"></a>.husky 目录结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">.husky/</span><br><span class="line">├── _</span><br><span class="line">│ └── husky.sh</span><br><span class="line">├── pre-commit</span><br><span class="line">├── commit-msg</span><br><span class="line">└── pre-push</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="跳过-hooks（特殊情况）"><a href="#跳过-hooks（特殊情况）" class="headerlink" title="跳过 hooks（特殊情况）"></a>跳过 hooks（特殊情况）</h2><p>在某些情况下，你可能需要跳过 hooks：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跳过所有 hooks</span></span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span> --no-verify</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用缩写</span></span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span> -n</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><strong>保持 hooks 快速执行</strong> - 避免在 pre-commit 中运行耗时很长的任务</li><li><strong>只检查暂存区的文件</strong> - 使用 lint-staged 只对将要提交的文件进行检查</li><li><strong>提供清晰的错误信息</strong> - 当检查失败时，给出明确的修复指导</li><li><strong>团队统一配置</strong> - 确保团队所有成员使用相同的 hooks 配置</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-Hook-不执行"><a href="#1-Hook-不执行" class="headerlink" title="1. Hook 不执行"></a>1. Hook 不执行</h3><p>确保文件有执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x .husky/*</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Windows-兼容性"><a href="#2-Windows-兼容性" class="headerlink" title="2. Windows 兼容性"></a>2. Windows 兼容性</h3><p>在 Windows 系统中，确保使用 Git Bash 或 WSL 来执行 hooks。</p><h3 id="3-性能优化"><a href="#3-性能优化" class="headerlink" title="3. 性能优化"></a>3. 性能优化</h3><p>对于大型项目，可以：</p><ul><li>使用缓存（如 ESLint cache）</li><li>只检查修改的文件</li><li>并行执行任务</li></ul><p>这样配置后，Husky 会在每次提交时自动运行代码质量检查，确保团队代码风格一致且质量达标。</p><p>希望这些信息能帮助您。如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Husky 是一个 Git hooks 工具，可以让我们在 Git 操作的特定阶段（如提交前、推送前）自动执行脚本，常用于代码质量检查、测试运行等。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="Husky" scheme="https://xuehuayu.cn/tags/Husky/"/>
    
    <category term="Git" scheme="https://xuehuayu.cn/tags/Git/"/>
    
    <category term="hooks" scheme="https://xuehuayu.cn/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 中的 args 详解，和 arguments 有什么不同？</title>
    <link href="https://xuehuayu.cn/article/56271070.html"/>
    <id>https://xuehuayu.cn/article/56271070.html</id>
    <published>2025-10-23T10:29:46.000Z</published>
    <updated>2025-10-31T10:41:20.262Z</updated>
    
    <content type="html"><![CDATA[<p><code>args</code> 在 TypeScript 中通常指<strong>函数参数</strong>，特别是<strong>剩余参数（rest parameters）</strong>。让我详细解释各种用法和场景。</p><span id="more"></span><h2 id="1-剩余参数（Rest-Parameters）"><a href="#1-剩余参数（Rest-Parameters）" class="headerlink" title="1. 剩余参数（Rest Parameters）"></a>1. 剩余参数（Rest Parameters）</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ...args 收集所有参数到一个数组中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, current</span>) =&gt;</span> total + current, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>)); <span class="comment">// 30</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="带固定参数的剩余参数"><a href="#带固定参数的剩余参数" class="headerlink" title="带固定参数的剩余参数"></a>带固定参数的剩余参数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">greeting: <span class="built_in">string</span>, ...names: <span class="built_in">string</span>[]</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;greeting&#125;</span>, <span class="subst">$&#123;names.join(<span class="string">&#x27;, &#x27;</span>)&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>));</span><br><span class="line"><span class="comment">// &quot;Hello, Alice, Bob, Charlie!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-函数参数对象（Arguments-Object）"><a href="#2-函数参数对象（Arguments-Object）" class="headerlink" title="2. 函数参数对象（Arguments Object）"></a>2. 函数参数对象（Arguments Object）</h2><p>在 TypeScript&#x2F;JavaScript 中，每个函数内部都可以访问 <code>arguments</code> 对象：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">traditionalSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    total += <span class="variable language_">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">traditionalSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>arguments</code> 不是数组，而是<strong>类数组对象</strong>。</p><h2 id="3-元组类型的剩余参数"><a href="#3-元组类型的剩余参数" class="headerlink" title="3. 元组类型的剩余参数"></a>3. 元组类型的剩余参数</h2><p>TypeScript 允许对剩余参数使用元组类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 固定长度和类型的剩余参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params">name: <span class="built_in">string</span>, ...[first, second]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;name&#125;</span>, Numbers: <span class="subst">$&#123;first&#125;</span>, <span class="subst">$&#123;second&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">processData</span>(<span class="string">&quot;John&quot;</span>, <span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 正常</span></span><br><span class="line"><span class="comment">// processData(&quot;John&quot;, 10); // 错误：缺少第二个数字参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合类型的剩余参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mixedArgs</span>(<span class="params">...args: [<span class="built_in">string</span>, <span class="built_in">number</span>, ...<span class="built_in">boolean</span>[]]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mixedArgs</span>(<span class="string">&quot;hello&quot;</span>, <span class="number">42</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-在箭头函数中的使用"><a href="#4-在箭头函数中的使用" class="headerlink" title="4. 在箭头函数中的使用"></a>4. 在箭头函数中的使用</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数中的剩余参数</span></span><br><span class="line"><span class="keyword">const</span> multiplyAll = (...<span class="attr">numbers</span>: <span class="built_in">number</span>[]): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">product, num</span>) =&gt;</span> product * num, <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiplyAll</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带泛型的剩余参数</span></span><br><span class="line"><span class="keyword">const</span> mergeArrays = &lt;T&gt;(...<span class="attr">arrays</span>: T[][]): T[] =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> arrays.<span class="title function_">flat</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">mergeArrays</span>([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-实际应用场景"><a href="#5-实际应用场景" class="headerlink" title="5. 实际应用场景"></a>5. 实际应用场景</h2><h3 id="场景-1：高阶函数和装饰器"><a href="#场景-1：高阶函数和装饰器" class="headerlink" title="场景 1：高阶函数和装饰器"></a>场景 1：高阶函数和装饰器</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数日志装饰器</span></span><br><span class="line"><span class="keyword">function</span> logExecution&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>&gt;(</span><br><span class="line">  <span class="attr">target</span>: T</span><br><span class="line">): <span class="function">(<span class="params">...args: Parameters&lt;T&gt;</span>) =&gt;</span> <span class="title class_">ReturnType</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args: Parameters&lt;T&gt;</span>): <span class="title class_">ReturnType</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数被调用，参数:`</span>, args);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">target</span>(...args);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数返回:`</span>, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loggedSum = <span class="title function_">logExecution</span>(sum);</span><br><span class="line"><span class="title function_">loggedSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 会输出调用日志</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="场景-2：配置合并"><a href="#场景-2：配置合并" class="headerlink" title="场景 2：配置合并"></a>场景 2：配置合并</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">  timeout?: <span class="built_in">number</span>;</span><br><span class="line">  retries?: <span class="built_in">number</span>;</span><br><span class="line">  baseURL?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createApiClient</span>(<span class="params">defaultConfig: Config, ...configs: Partial&lt;Config&gt;[]</span>): <span class="title class_">Config</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> configs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">merged, config</span>) =&gt;</span> (&#123; ...merged, ...config &#125;), defaultConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="title function_">createApiClient</span>(</span><br><span class="line">  &#123; <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="attr">baseURL</span>: <span class="string">&quot;/api&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">retries</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">timeout</span>: <span class="number">3000</span> &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 结果: &#123; timeout: 3000, baseURL: &quot;/api&quot;, retries: 3 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="场景-3：事件处理器"><a href="#场景-3：事件处理器" class="headerlink" title="场景 3：事件处理器"></a>场景 3：事件处理器</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">events</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">Function</span>[]&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="attr">event</span>: <span class="built_in">string</span>, ...<span class="attr">handlers</span>: (<span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">void</span>)[]): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">has</span>(event)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">set</span>(event, []);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">get</span>(event)!.<span class="title function_">push</span>(...handlers);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="attr">event</span>: <span class="built_in">string</span>, ...<span class="attr">args</span>: <span class="built_in">any</span>[]): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handlers = <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">get</span>(event) || [];</span><br><span class="line">    handlers.<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(...args));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">msg: <span class="built_in">string</span>, priority: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`消息: <span class="subst">$&#123;msg&#125;</span>, 优先级: <span class="subst">$&#123;priority&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello World&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-泛型与剩余参数"><a href="#6-泛型与剩余参数" class="headerlink" title="6. 泛型与剩余参数"></a>6. 泛型与剩余参数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型剩余参数 - 保持类型安全</span></span><br><span class="line"><span class="keyword">function</span> callAll&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt;(</span><br><span class="line">  ...<span class="attr">functions</span>: (<span class="function">(<span class="params">...args: T</span>) =&gt;</span> <span class="built_in">void</span>)[]</span><br><span class="line">): <span class="function">(<span class="params">...args: T</span>) =&gt;</span> <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args: T</span>) =&gt;</span> &#123;</span><br><span class="line">    functions.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(...args));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">logger</span> = (<span class="params">msg: <span class="built_in">string</span>, count: <span class="built_in">number</span></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(msg, count);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">storage</span> = (<span class="params">msg: <span class="built_in">string</span>, count: <span class="built_in">number</span></span>) =&gt; <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;last&#x27;</span>, msg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> combined = <span class="title function_">callAll</span>(logger, storage);</span><br><span class="line"><span class="title function_">combined</span>(<span class="string">&quot;test&quot;</span>, <span class="number">5</span>); <span class="comment">// 两个函数都会接收到 &quot;test&quot; 和 5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-类型工具与-args"><a href="#7-类型工具与-args" class="headerlink" title="7. 类型工具与 args"></a>7. 类型工具与 <code>args</code></h2><h3 id="Parameters-工具类型"><a href="#Parameters-工具类型" class="headerlink" title="Parameters 工具类型"></a>Parameters 工具类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取函数的参数类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SumParams</span> = <span class="title class_">Parameters</span>&lt;<span class="keyword">typeof</span> sum&gt;; <span class="comment">// [number[]]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GreetParams</span> = <span class="title class_">Parameters</span>&lt;<span class="keyword">typeof</span> greet&gt;; <span class="comment">// [string, ...string[]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现一个包装函数</span></span><br><span class="line"><span class="keyword">function</span> withRetry&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], R&gt;(</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">(<span class="params">...args: T</span>) =&gt;</span> R,</span><br><span class="line">  <span class="attr">retries</span>: <span class="built_in">number</span></span><br><span class="line">): <span class="function">(<span class="params">...args: T</span>) =&gt;</span> R &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args: T</span>): R &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">lastError</span>: <span class="title class_">Error</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; retries; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn</span>(...args);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        lastError = error <span class="keyword">as</span> <span class="title class_">Error</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> lastError!;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-常见模式和最佳实践"><a href="#8-常见模式和最佳实践" class="headerlink" title="8. 常见模式和最佳实践"></a>8. 常见模式和最佳实践</h2><h3 id="模式-1：参数验证"><a href="#模式-1：参数验证" class="headerlink" title="模式 1：参数验证"></a>模式 1：参数验证</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">validateAndProcess</span>(<span class="params">...inputs: (<span class="built_in">string</span> | <span class="built_in">number</span>)[]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (inputs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;至少需要一个参数&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inputs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">input, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input === <span class="literal">null</span> || input === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`参数 <span class="subst">$&#123;index&#125;</span> 不能为 null 或 undefined`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模式-2：函数组合"><a href="#模式-2：函数组合" class="headerlink" title="模式 2：函数组合"></a>模式 2：函数组合</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> compose&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt;(</span><br><span class="line">  ...<span class="attr">functions</span>: (<span class="function">(<span class="params">...args: T</span>) =&gt;</span> <span class="built_in">void</span>)[]</span><br><span class="line">): <span class="function">(<span class="params">...args: T</span>) =&gt;</span> <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args: T</span>) =&gt;</span> &#123;</span><br><span class="line">    functions.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">fn</span>(...args);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;函数执行错误:&#x27;</span>, error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模式-3：条件参数处理"><a href="#模式-3：条件参数处理" class="headerlink" title="模式 3：条件参数处理"></a>模式 3：条件参数处理</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flexibleProcessor</span>(<span class="params"></span></span><br><span class="line"><span class="params">  required: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  ...optional: (<span class="built_in">number</span> | <span class="built_in">string</span>)[]</span></span><br><span class="line"><span class="params"></span>): &#123; <span class="attr">required</span>: <span class="built_in">string</span>; <span class="attr">optional</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] &#125; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> processedOptional = optional.<span class="title function_">map</span>(<span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arg.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arg * <span class="number">2</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; required, <span class="attr">optional</span>: processedOptional &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-注意事项"><a href="#9-注意事项" class="headerlink" title="9. 注意事项"></a>9. 注意事项</h2><h3 id="注意-1：arguments-vs-剩余参数"><a href="#注意-1：arguments-vs-剩余参数" class="headerlink" title="注意 1：arguments vs 剩余参数"></a>注意 1：<code>arguments</code> vs 剩余参数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 传统方式 - 没有类型安全</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">oldWay</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], <span class="variable language_">arguments</span>[<span class="number">1</span>]); <span class="comment">// 没有类型提示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 现代方式 - 类型安全</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newWay</span>(<span class="params">...args: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">0</span>], args[<span class="number">1</span>]); <span class="comment">// 有完整的类型提示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意-2：性能考虑"><a href="#注意-2：性能考虑" class="headerlink" title="注意 2：性能考虑"></a>注意 2：性能考虑</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于性能敏感的场景，避免在热路径中使用剩余参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">optimizedSum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, c?: <span class="built_in">number</span>, d?: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> total = a + b;</span><br><span class="line">  <span class="keyword">if</span> (c !== <span class="literal">undefined</span>) total += c;</span><br><span class="line">  <span class="keyword">if</span> (d !== <span class="literal">undefined</span>) total += d;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比使用 ...args: number[] 更高效</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="💎-总结"><a href="#💎-总结" class="headerlink" title="💎 总结"></a>💎 总结</h2><p>在 TypeScript 中，<code>args</code> 主要涉及：</p><ol><li><strong>剩余参数</strong> (<code>...args</code>)：收集多个参数到数组</li><li><strong><code>arguments</code> 对象</strong>：函数内可访问的类数组对象</li><li><strong>元组类型的剩余参数</strong>：提供更精确的类型控制</li><li><strong>泛型剩余参数</strong>：保持类型安全的可变参数</li></ol><p><strong>最佳实践</strong>：</p><ul><li>优先使用剩余参数而非 <code>arguments</code> 对象</li><li>为剩余参数提供明确的类型注解</li><li>在需要精确类型控制时使用元组类型</li><li>考虑性能影响，在热路径中避免不必要的数组创建</li></ul><p><code>args</code> 是 TypeScript 函数编程中的重要概念，合理使用可以大大增强代码的灵活性和类型安全性。</p><p>希望这些信息能帮助您。如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;args&lt;/code&gt; 在 TypeScript 中通常指&lt;strong&gt;函数参数&lt;/strong&gt;，特别是&lt;strong&gt;剩余参数（rest parameters）&lt;/strong&gt;。让我详细解释各种用法和场景。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="TypeScript" scheme="https://xuehuayu.cn/tags/TypeScript/"/>
    
    <category term="arguments" scheme="https://xuehuayu.cn/tags/arguments/"/>
    
    <category term="args" scheme="https://xuehuayu.cn/tags/args/"/>
    
    <category term="参数" scheme="https://xuehuayu.cn/tags/%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中as const断言和const声明变量的区别是什么？</title>
    <link href="https://xuehuayu.cn/article/8c6832b5.html"/>
    <id>https://xuehuayu.cn/article/8c6832b5.html</id>
    <published>2025-10-23T09:09:22.000Z</published>
    <updated>2025-10-31T10:41:20.266Z</updated>
    
    <content type="html"><![CDATA[<p>在TypeScript中，<code>let array = [1, 2, 3] as const</code> 和 <code>const array = [1, 2, 3]</code> 的主要区别在于<strong>数组元素的可变性</strong>和<strong>类型推断的宽窄</strong>。</p><span id="more"></span><p>为了帮你快速把握核心区别，可以先看这个表格：</p><table><thead><tr><th>特性维度</th><th><code>let array = [1, 2, 3] as const</code></th><th><code>const array = [1, 2, 3]</code></th></tr></thead><tbody><tr><td><strong>变量绑定</strong></td><td><code>array</code> 变量绑定可变更 (可重新赋值)</td><td><code>array</code> 变量绑定不可变 (不可重新赋值)</td></tr><tr><td><strong>数组元素</strong></td><td>元素<strong>不可变</strong> (只读元组)，不能增删改</td><td>元素<strong>可变</strong>，可以增删改元素</td></tr><tr><td><strong>推断类型</strong></td><td>被推断为 <code>readonly [1, 2, 3]</code> (<strong>字面量只读元组</strong>，非常精确)</td><td>被推断为 <code>number[]</code> (<strong>通用数字数组</strong>，类型较宽泛)</td></tr><tr><td><strong>适用场景</strong></td><td>需要<strong>绝对恒定</strong>、结构固定的数据，如配置、枚举、函数返回值</td><td>变量引用<strong>不可变</strong>，但数组内容需要<strong>动态变化</strong>的情况</td></tr></tbody></table><h3 id="🔍-理解类型推断和可变性"><a href="#🔍-理解类型推断和可变性" class="headerlink" title="🔍 理解类型推断和可变性"></a>🔍 理解类型推断和可变性</h3><ul><li><p><strong>类型推断的差异</strong>：</p><ul><li>使用 <code>as const</code> 后，TypeScript 会将数组推断为一个<strong>只读的元组</strong>（readonly tuple），每个元素都会被视为它具体的字面量类型（如 <code>1</code>，<code>2</code>，<code>3</code>）。这被称为 <strong>const 上下文</strong>。</li><li>仅使用 <code>const</code> 声明数组，TypeScript 通常会将数组类型推断为相对宽泛的元素类型数组，例如 <code>number[]</code>。</li></ul></li><li><p><strong>可变性的区别</strong>：</p><ul><li><code>as const</code> 断言使得数组本身和其所有元素都变为<strong>只读</strong>（readonly），你不能对数组进行添加、删除或修改元素的操作。</li><li>使用 <code>const</code> 声明的数组，其变量引用不可重新赋值，但你可以修改数组内部的内容，比如使用 <code>push()</code>、<code>pop()</code> 或直接通过索引修改元素。</li></ul></li></ul><h3 id="💡-如何选择使用"><a href="#💡-如何选择使用" class="headerlink" title="💡 如何选择使用"></a>💡 如何选择使用</h3><ul><li>当你需要一个<strong>结构固定、内容绝对不允许修改</strong>的数组时，使用 <code>as const</code>。这常见于配置项、枚举值列表或需要精确类型推断的场景。</li><li>当你需要确保<strong>变量引用不变</strong>，但<strong>数组内容可能需要动态变化</strong>时，使用 <code>const</code> 声明数组。</li></ul><h3 id="⚠️-补充说明"><a href="#⚠️-补充说明" class="headerlink" title="⚠️ 补充说明"></a>⚠️ 补充说明</h3><p>需要注意的是，<code>as const</code> 断言会从编译后的 JavaScript 代码中完全删除，它仅在 TypeScript 的类型检查阶段起作用。这意味着使用或不使用 <code>as const</code>，应用程序在运行时的行为完全没有区别。</p><p>希望这些信息能帮助您。如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在TypeScript中，&lt;code&gt;let array = [1, 2, 3] as const&lt;/code&gt; 和 &lt;code&gt;const array = [1, 2, 3]&lt;/code&gt; 的主要区别在于&lt;strong&gt;数组元素的可变性&lt;/strong&gt;和&lt;strong&gt;类型推断的宽窄&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="TypeScript" scheme="https://xuehuayu.cn/tags/TypeScript/"/>
    
    <category term="asserts" scheme="https://xuehuayu.cn/tags/asserts/"/>
    
    <category term="断言" scheme="https://xuehuayu.cn/tags/%E6%96%AD%E8%A8%80/"/>
    
    <category term="cosnt" scheme="https://xuehuayu.cn/tags/cosnt/"/>
    
    <category term="as const" scheme="https://xuehuayu.cn/tags/as-const/"/>
    
    <category term="常量" scheme="https://xuehuayu.cn/tags/%E5%B8%B8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 断言详解及示例</title>
    <link href="https://xuehuayu.cn/article/6ff625e1.html"/>
    <id>https://xuehuayu.cn/article/6ff625e1.html</id>
    <published>2025-10-23T08:54:54.000Z</published>
    <updated>2025-10-31T10:41:20.263Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript 断言用于告诉编译器「你比它更了解类型」，让编译器信任开发者的判断。</p><span id="more"></span><h2 id="1-类型断言-Type-Assertions"><a href="#1-类型断言-Type-Assertions" class="headerlink" title="1. 类型断言 (Type Assertions)"></a>1. 类型断言 (Type Assertions)</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1: 尖括号语法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2: as 语法 (推荐，尤其在 JSX 中)</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLengthAs</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常见使用场景"><a href="#常见使用场景" class="headerlink" title="常见使用场景"></a>常见使用场景</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 将 any 断言为具体类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">unknownValue</span>: <span class="built_in">any</span> = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>: <span class="built_in">string</span> = (&lt;<span class="built_in">string</span>&gt;unknownValue);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>: <span class="built_in">string</span> = (unknownValue <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将联合类型断言为其中一个类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">meow</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">bark</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPet</span>(<span class="params"></span>): <span class="title class_">Cat</span> | <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&quot;Buddy&quot;</span>, <span class="attr">meow</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;meow&quot;</span>) &#125; <span class="keyword">as</span> <span class="title class_">Cat</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pet = <span class="title function_">getPet</span>();</span><br><span class="line">(pet <span class="keyword">as</span> <span class="title class_">Cat</span>).<span class="title function_">meow</span>(); <span class="comment">// 断言为 Cat 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将父类断言为更具体的子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is flying`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">animal</span>: <span class="title class_">Animal</span> = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;Sparrow&quot;</span>);</span><br><span class="line">(animal <span class="keyword">as</span> <span class="title class_">Bird</span>).<span class="title function_">fly</span>(); <span class="comment">// 断言为 Bird 类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-非空断言-Non-null-Assertion"><a href="#2-非空断言-Non-null-Assertion" class="headerlink" title="2. 非空断言 (Non-null Assertion)"></a>2. 非空断言 (Non-null Assertion)</h2><p>使用 <code>!</code> 运算符断言值不为 <code>null</code> 或 <code>undefined</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 变量非空断言</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">liveDangerously</span>(<span class="params">x?: <span class="built_in">number</span> | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 使用非空断言，告诉编译器 x 不会是 null 或 undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x!.<span class="title function_">toFixed</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 函数调用非空断言</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  address?: &#123;</span><br><span class="line">    <span class="attr">street</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">city</span>: <span class="built_in">string</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span>!.<span class="property">city</span>); <span class="comment">// 断言 address 存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 数组访问非空断言</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">array</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> firstElement = array[<span class="number">0</span>]!; <span class="comment">// 断言第一个元素存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 与可选链结合使用</span></span><br><span class="line"><span class="keyword">let</span> city = user.<span class="property">address</span>?.<span class="property">city</span>!; <span class="comment">// 如果 address 存在，则 city 一定存在</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-常量断言-Const-Assertions"><a href="#3-常量断言-Const-Assertions" class="headerlink" title="3. 常量断言 (Const Assertions)"></a>3. 常量断言 (Const Assertions)</h2><p>使用 <code>as const</code> 将类型收窄为最具体的字面量类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 基本类型常量断言</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">&quot;hello&quot;</span> <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// 类型: &quot;hello&quot;</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">42</span> <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// 类型: 42</span></span><br><span class="line"><span class="keyword">let</span> z = <span class="literal">true</span> <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// 类型: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 数组常量断言</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// 类型: readonly [1, 2, 3]</span></span><br><span class="line"><span class="comment">// array[0] = 4; // 错误: 无法分配到 &quot;0&quot;，因为它是只读属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 对象常量断言</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">hobbies</span>: [<span class="string">&quot;reading&quot;</span>, <span class="string">&quot;swimming&quot;</span>]</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.name = &quot;Bob&quot;; // 错误: 无法分配到 &quot;name&quot;，因为它是只读属性</span></span><br><span class="line"><span class="comment">// user.hobbies.push(&quot;coding&quot;); // 错误: 属性 &#x27;push&#x27; 在类型 &#x27;readonly [&quot;reading&quot;, &quot;swimming&quot;]&#x27; 上不存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 函数返回常量断言</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getConfig</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">    <span class="attr">ssl</span>: <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="title function_">getConfig</span>();</span><br><span class="line"><span class="comment">// config.host = &quot;127.0.0.1&quot;; // 错误: 无法分配到 &quot;host&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-断言函数-Assertion-Functions"><a href="#4-断言函数-Assertion-Functions" class="headerlink" title="4. 断言函数 (Assertion Functions)"></a>4. 断言函数 (Assertion Functions)</h2><p>用于在运行时验证条件，并在类型层面反映验证结果。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 断言函数 - 简单形式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">assert</span>(<span class="params">condition: <span class="built_in">any</span>, msg?: <span class="built_in">string</span></span>): asserts condition &#123;</span><br><span class="line">  <span class="keyword">if</span> (!condition) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processValue</span>(<span class="params">value: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="title function_">assert</span>(<span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>, <span class="string">&quot;Value must be a number&quot;</span>);</span><br><span class="line">  <span class="comment">// 这里 value 的类型被收窄为 number</span></span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 断言函数 - 类型谓词形式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">value: <span class="built_in">any</span></span>): value is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">assertIsString</span>(<span class="params">value: <span class="built_in">any</span></span>): asserts value is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isString</span>(value)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Value must be a string&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="title function_">assertIsString</span>(x);</span><br><span class="line">  <span class="comment">// 这里 x 的类型被收窄为 string</span></span><br><span class="line">  <span class="keyword">return</span> x.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 复杂类型断言函数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="title function_">meow</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isCat</span>(<span class="params">pet: Cat | Dog</span>): pet is <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (pet <span class="keyword">as</span> <span class="title class_">Cat</span>).<span class="property">meow</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">assertIsCat</span>(<span class="params">pet: Cat | Dog</span>): asserts pet is <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isCat</span>(pet)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Pet is not a cat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-双重断言-Double-Assertion"><a href="#5-双重断言-Double-Assertion" class="headerlink" title="5. 双重断言 (Double Assertion)"></a>5. 双重断言 (Double Assertion)</h2><p>当两种类型没有直接关系时，可以先断言为 <code>any</code> 或 <code>unknown</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 双重断言示例</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ButtonProps</span> &#123;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">children</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DivProps</span> &#123;</span><br><span class="line">  <span class="attr">className</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">buttonProps</span>: <span class="title class_">ButtonProps</span> = &#123;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked&quot;</span>),</span><br><span class="line">  <span class="attr">children</span>: <span class="string">&quot;Click me&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接断言会报错，因为 ButtonProps 和 DivProps 不兼容</span></span><br><span class="line"><span class="comment">// let divProps: DivProps = buttonProps as DivProps; // 错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用双重断言</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">divProps</span>: <span class="title class_">DivProps</span> = buttonProps <span class="keyword">as</span> <span class="built_in">any</span> <span class="keyword">as</span> <span class="title class_">DivProps</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 更安全的做法 - 使用 unknown</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">saferDivProps</span>: <span class="title class_">DivProps</span> = buttonProps <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="title class_">DivProps</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 实际应用场景 - 处理第三方库类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleEvent</span>(<span class="params">event: Event</span>) &#123;</span><br><span class="line">  <span class="comment">// 假设我们需要 MouseEvent 的特有属性</span></span><br><span class="line">  <span class="keyword">const</span> mouseEvent = event <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="title class_">MouseEvent</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mouseEvent.<span class="property">clientX</span>, mouseEvent.<span class="property">clientY</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-实际应用示例"><a href="#6-实际应用示例" class="headerlink" title="6. 实际应用示例"></a>6. 实际应用示例</h2><h3 id="示例-1-DOM-操作"><a href="#示例-1-DOM-操作" class="headerlink" title="示例 1: DOM 操作"></a>示例 1: DOM 操作</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取 DOM 元素</span></span><br><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myInput&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>;</span><br><span class="line">input.<span class="property">value</span> = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// 现在可以访问 HTMLInputElement 的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 事件处理</span></span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.submit-btn&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLButtonElement</span>;</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mouseEvent = e <span class="keyword">as</span> <span class="title class_">MouseEvent</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Clicked at: <span class="subst">$&#123;mouseEvent.clientX&#125;</span>, <span class="subst">$&#123;mouseEvent.clientY&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 非空断言在 DOM 中的使用</span></span><br><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myForm&quot;</span>)!; <span class="comment">// 确定这个元素存在</span></span><br><span class="line">form.<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, handleSubmit);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="示例-2-API-响应处理"><a href="#示例-2-API-响应处理" class="headerlink" title="示例 2: API 响应处理"></a>示例 2: API 响应处理</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: T;</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;success&quot;</span> | <span class="string">&quot;error&quot;</span>;</span><br><span class="line">  message?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设我们从 API 获取数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUser</span>(<span class="params">userId: <span class="built_in">number</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">json</span>() <span class="keyword">as</span> <span class="title class_">ApiResponse</span>&lt;<span class="title class_">User</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用断言确保数据格式</span></span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">status</span> === <span class="string">&quot;success&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result.<span class="property">data</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(result.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用常量断言定义配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">API_CONFIG</span> = &#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&quot;https://api.example.com&quot;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">retries</span>: <span class="number">3</span></span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="示例-3-状态管理"><a href="#示例-3-状态管理" class="headerlink" title="示例 3: 状态管理"></a>示例 3: 状态管理</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AppState</span> = &#123;</span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">  &#125; | <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">loading</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">error</span>: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateUserProfile</span>(<span class="params">state: AppState, updates: Partial&lt;AppState[<span class="string">&quot;user&quot;</span>]&gt;</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用非空断言，因为我们确定此时 user 存在</span></span><br><span class="line">  <span class="keyword">const</span> currentUser = state.<span class="property">user</span>!;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      ...currentUser,</span><br><span class="line">      ...updates</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用断言函数进行运行时验证</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validateUser</span>(<span class="params">user: <span class="built_in">any</span></span>): user is <span class="title class_">AppState</span>[<span class="string">&quot;user&quot;</span>] &#123;</span><br><span class="line">  <span class="keyword">return</span> user &amp;&amp;</span><br><span class="line">          <span class="keyword">typeof</span> user.<span class="property">id</span> === <span class="string">&quot;number&quot;</span> &amp;&amp;</span><br><span class="line">          <span class="keyword">typeof</span> user.<span class="property">name</span> === <span class="string">&quot;string&quot;</span> &amp;&amp;</span><br><span class="line">          <span class="keyword">typeof</span> user.<span class="property">email</span> === <span class="string">&quot;string&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setUser</span>(<span class="params">state: AppState, userData: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">validateUser</span>(userData)) &#123;</span><br><span class="line">    state.<span class="property">user</span> = userData;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Invalid user data&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-最佳实践和注意事项"><a href="#7-最佳实践和注意事项" class="headerlink" title="7. 最佳实践和注意事项"></a>7. 最佳实践和注意事项</h2><h3 id="应该使用断言的情况："><a href="#应该使用断言的情况：" class="headerlink" title="应该使用断言的情况："></a>应该使用断言的情况：</h3><ol><li><strong>DOM 操作</strong>：确定元素类型时</li><li><strong>API 响应</strong>：处理已知结构的数据时</li><li><strong>测试代码</strong>：模拟特定场景时</li><li><strong>迁移代码</strong>：从 JavaScript 迁移时</li></ol><h3 id="应该避免的情况："><a href="#应该避免的情况：" class="headerlink" title="应该避免的情况："></a>应该避免的情况：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误的用法 - 掩盖了真正的类型错误</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">string</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> numberValue = value <span class="keyword">as</span> <span class="built_in">any</span> <span class="keyword">as</span> <span class="built_in">number</span>; <span class="comment">// 危险！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 更好的做法 - 进行类型检查</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">safeConvert</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> num = <span class="title class_">Number</span>(str);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(num)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Invalid number&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="断言-vs-类型守卫："><a href="#断言-vs-类型守卫：" class="headerlink" title="断言 vs 类型守卫："></a>断言 vs 类型守卫：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用类型守卫 (更安全)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isNumber</span>(<span class="params">value: <span class="built_in">any</span></span>): value is <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isNumber</span>(value)) &#123;</span><br><span class="line">    <span class="comment">// TypeScript 知道这里 value 是 number</span></span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// TypeScript 知道这里 value 是 string</span></span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用断言 (需要开发者确保正确性)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processWithAssert</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 开发者需要确保 value 确实是 number</span></span><br><span class="line">  <span class="keyword">return</span> (value <span class="keyword">as</span> <span class="built_in">number</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：断言是 TypeScript 中的强大工具，但应该谨慎使用。优先考虑类型守卫和正确的类型设计，只在确实比编译器更了解类型的情况下使用断言。</p><p>希望这些信息能帮助您。如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;TypeScript 断言用于告诉编译器「你比它更了解类型」，让编译器信任开发者的判断。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="TypeScript" scheme="https://xuehuayu.cn/tags/TypeScript/"/>
    
    <category term="asserts" scheme="https://xuehuayu.cn/tags/asserts/"/>
    
    <category term="断言" scheme="https://xuehuayu.cn/tags/%E6%96%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 泛型（Generics）必须在方法名后面写 &lt;T&gt; 吗?</title>
    <link href="https://xuehuayu.cn/article/56378e04.html"/>
    <id>https://xuehuayu.cn/article/56378e04.html</id>
    <published>2025-10-23T08:52:28.000Z</published>
    <updated>2025-10-31T10:41:20.264Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript 泛型（Generics）必须在方法名后面写 <T> 吗?<br>答案是不，不一定必须在方法名后面写 <code>&lt;T&gt;</code>。泛型的声明位置取决于使用场景：</p><span id="more"></span><h2 id="1-不同位置的泛型声明"><a href="#1-不同位置的泛型声明" class="headerlink" title="1. 不同位置的泛型声明"></a>1. 不同位置的泛型声明</h2><h3 id="在类上声明（推荐用于类方法）"><a href="#在类上声明（推荐用于类方法）" class="headerlink" title="在类上声明（推荐用于类方法）"></a>在类上声明（推荐用于类方法）</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataProcessor</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// 类方法可以直接使用类级别的泛型 T</span></span><br><span class="line">  <span class="title function_">process</span>(<span class="attr">data</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不需要在每个方法后面写 &lt;T&gt;</span></span><br><span class="line">  <span class="title function_">validate</span>(<span class="attr">data</span>: T): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data !== <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> stringProcessor = <span class="keyword">new</span> <span class="title class_">DataProcessor</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">stringProcessor.<span class="title function_">process</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 正确</span></span><br><span class="line"><span class="comment">// stringProcessor.process(123); // 错误，类型不匹配</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在接口上声明"><a href="#在接口上声明" class="headerlink" title="在接口上声明"></a>在接口上声明</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Repository</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="title function_">findById</span>(<span class="attr">id</span>: <span class="built_in">number</span>): T | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="title function_">save</span>(<span class="attr">entity</span>: T): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">findAll</span>(): T[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口时指定具体类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserRepository</span> <span class="keyword">implements</span> <span class="title class_">Repository</span>&lt;<span class="title class_">User</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">findById</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="title class_">User</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="comment">// 实现...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">save</span>(<span class="attr">entity</span>: <span class="title class_">User</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 实现...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">findAll</span>(): <span class="title class_">User</span>[] &#123;</span><br><span class="line">    <span class="comment">// 实现...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在方法上声明（独立泛型方法）"><a href="#在方法上声明（独立泛型方法）" class="headerlink" title="在方法上声明（独立泛型方法）"></a>在方法上声明（独立泛型方法）</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Utility</span> &#123;</span><br><span class="line">  <span class="comment">// 静态方法通常需要在方法上声明泛型</span></span><br><span class="line">  <span class="keyword">static</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实例方法也可以有独立的泛型</span></span><br><span class="line">  parseJson&lt;T&gt;(<span class="attr">json</span>: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 混合使用：使用类泛型 + 方法泛型</span></span><br><span class="line">  transform&lt;U&gt;(<span class="attr">data</span>: T, <span class="attr">transformer</span>: <span class="function">(<span class="params">input: T</span>) =&gt;</span> U): U &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">transformer</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-何时需要在方法名后写"><a href="#2-何时需要在方法名后写" class="headerlink" title="2. 何时需要在方法名后写 &lt;T&gt;"></a>2. 何时需要在方法名后写 <code>&lt;T&gt;</code></h2><h3 id="需要独立泛型参数时"><a href="#需要独立泛型参数时" class="headerlink" title="需要独立泛型参数时"></a>需要独立泛型参数时</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">  <span class="comment">// 这个方法有自己独立的泛型参数 U</span></span><br><span class="line">  convert&lt;U&gt;(<span class="attr">value</span>: <span class="built_in">number</span>, <span class="attr">converter</span>: <span class="function">(<span class="params">num: <span class="built_in">number</span></span>) =&gt;</span> U): U &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">converter</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多个泛型参数</span></span><br><span class="line">  pair&lt;T, U&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: U): [T, U] &#123;</span><br><span class="line">    <span class="keyword">return</span> [first, second];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayHelper</span> &#123;</span><br><span class="line">  <span class="comment">// 静态方法必须自己声明泛型</span></span><br><span class="line">  <span class="keyword">static</span> firstElement&lt;T&gt;(<span class="attr">array</span>: T[]): T | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> filterByType&lt;T&gt;(<span class="attr">array</span>: <span class="built_in">any</span>[], <span class="attr">type</span>: <span class="keyword">new</span> () =&gt; T): T[] &#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item <span class="keyword">instanceof</span> <span class="keyword">type</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-实际场景示例"><a href="#3-实际场景示例" class="headerlink" title="3. 实际场景示例"></a>3. 实际场景示例</h2><h3 id="场景1：数据映射器类"><a href="#场景1：数据映射器类" class="headerlink" title="场景1：数据映射器类"></a>场景1：数据映射器类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类级别声明泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataMapper</span>&lt;<span class="title class_">TInput</span>, <span class="title class_">TOutput</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> mapper: (input: TInput) =&gt; TOutput</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法不需要单独声明泛型</span></span><br><span class="line">  <span class="title function_">map</span>(<span class="attr">data</span>: <span class="title class_">TInput</span>): <span class="title class_">TOutput</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">mapper</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">mapArray</span>(<span class="attr">data</span>: <span class="title class_">TInput</span>[]): <span class="title class_">TOutput</span>[] &#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="variable language_">this</span>.<span class="property">mapper</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> userMapper = <span class="keyword">new</span> <span class="title class_">DataMapper</span>&lt;<span class="title class_">RawUser</span>, <span class="title class_">User</span>&gt;(<span class="function"><span class="params">raw</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">id</span>: raw.<span class="property">user_id</span>,</span><br><span class="line">  <span class="attr">name</span>: raw.<span class="property">user_name</span>,</span><br><span class="line">  <span class="attr">email</span>: raw.<span class="property">user_email</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = userMapper.<span class="title function_">mapArray</span>(rawUsers);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="场景2：混合使用"><a href="#场景2：混合使用" class="headerlink" title="场景2：混合使用"></a>场景2：混合使用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ApiClient</span>&lt;<span class="title class_">TAuth</span> = <span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 使用类级别的泛型</span></span><br><span class="line">  <span class="title function_">authenticate</span>(<span class="attr">auth</span>: <span class="title class_">TAuth</span>): <span class="variable language_">this</span> &#123;</span><br><span class="line">    <span class="comment">// 认证逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法级别的独立泛型</span></span><br><span class="line">  <span class="keyword">async</span> get&lt;<span class="title class_">TResponse</span>&gt;(<span class="attr">url</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">TResponse</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用类泛型 + 方法泛型</span></span><br><span class="line">  <span class="keyword">async</span> post&lt;<span class="title class_">TRequest</span>, <span class="title class_">TResponse</span>&gt;(</span><br><span class="line">    <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="title class_">TRequest</span></span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="title class_">TResponse</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">ApiClient</span>&lt;&#123; <span class="attr">token</span>: <span class="built_in">string</span> &#125;&gt;();</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> client.<span class="property">get</span>&lt;<span class="title class_">User</span>&gt;(<span class="string">&#x27;/api/user/1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> client.<span class="property">post</span>&lt;<span class="title class_">CreateUserRequest</span>, <span class="title class_">CreateUserResponse</span>&gt;(</span><br><span class="line">  <span class="string">&#x27;/api/users&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">email</span>: <span class="string">&#x27;john@example.com&#x27;</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-最佳实践建议"><a href="#4-最佳实践建议" class="headerlink" title="4. 最佳实践建议"></a>4. 最佳实践建议</h2><h3 id="推荐在类级别声明的情况："><a href="#推荐在类级别声明的情况：" class="headerlink" title="推荐在类级别声明的情况："></a>推荐在类级别声明的情况：</h3><ul><li>当多个方法使用相同的类型时</li><li>当类型在整个类生命周期中保持一致时</li><li>当创建类型特定的实例时</li></ul><h3 id="推荐在方法级别声明的情况："><a href="#推荐在方法级别声明的情况：" class="headerlink" title="推荐在方法级别声明的情况："></a>推荐在方法级别声明的情况：</h3><ul><li>静态方法</li><li>工具方法，类型与类无关时</li><li>方法需要独立的类型参数时</li><li>当类型只在单个方法中使用时</li></ul><h3 id="示例对比："><a href="#示例对比：" class="headerlink" title="示例对比："></a>示例对比：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ 好的做法 - 相关方法共享类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Repository</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="title function_">findById</span>(<span class="attr">id</span>: <span class="built_in">number</span>): T | <span class="literal">undefined</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  <span class="title function_">save</span>(<span class="attr">entity</span>: T): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 好的做法 - 独立工具方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Helpers</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> fetchJson&lt;T&gt;(<span class="attr">url</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ 不必要的重复</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BadExample</span> &#123;</span><br><span class="line">  <span class="comment">// 每个方法都声明相同的泛型 - 冗余</span></span><br><span class="line">  findById&lt;T&gt;(<span class="attr">id</span>: <span class="built_in">number</span>): T | <span class="literal">undefined</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  save&lt;T&gt;(<span class="attr">entity</span>: T): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：只有在方法需要独立于类的泛型参数时，才需要在方法名后面写 <code>&lt;T&gt;</code>。如果多个方法共享相同的类型约束，应该在类级别声明泛型。</p><p>希望这些信息能帮助您。如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;TypeScript 泛型（Generics）必须在方法名后面写 &lt;T&gt; 吗?&lt;br&gt;答案是不，不一定必须在方法名后面写 &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;。泛型的声明位置取决于使用场景：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="TypeScript" scheme="https://xuehuayu.cn/tags/TypeScript/"/>
    
    <category term="Generics" scheme="https://xuehuayu.cn/tags/Generics/"/>
    
    <category term="泛型" scheme="https://xuehuayu.cn/tags/%E6%B3%9B%E5%9E%8B/"/>
    
    <category term="&lt;T&gt;" scheme="https://xuehuayu.cn/tags/T/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 泛型（Generics）详解及示例</title>
    <link href="https://xuehuayu.cn/article/a5ee9b3f.html"/>
    <id>https://xuehuayu.cn/article/a5ee9b3f.html</id>
    <published>2025-10-23T08:44:17.000Z</published>
    <updated>2025-10-31T10:41:20.265Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript 泛型（Generics）详解及示例</p><span id="more"></span><h2 id="1-什么是泛型？"><a href="#1-什么是泛型？" class="headerlink" title="1. 什么是泛型？"></a>1. 什么是泛型？</h2><p>泛型是 TypeScript 中创建可重用组件的重要工具，它允许我们创建可以处理多种类型而不是单一类型的组件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不使用泛型 - 只能处理特定类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">identityNumber</span>(<span class="params">arg: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">identityString</span>(<span class="params">arg: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型 - 可以处理任意类型</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-基础泛型语法"><a href="#2-基础泛型语法" class="headerlink" title="2. 基础泛型语法"></a>2. 基础泛型语法</h2><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本泛型函数</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方式</span></span><br><span class="line"><span class="keyword">let</span> output1 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 显式指定类型</span></span><br><span class="line"><span class="keyword">let</span> output2 = <span class="title function_">identity</span>(<span class="string">&quot;world&quot;</span>); <span class="comment">// 类型推断</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型接口</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span>&lt;<span class="built_in">number</span>&gt; = identity;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: T;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">zeroValue: T, add: (x: T, y: T) =&gt; T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">zeroValue</span> = zeroValue;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">add</span> = add;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用数字类型</span></span><br><span class="line"><span class="keyword">let</span> numberInstance = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">0</span>, <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用字符串类型</span></span><br><span class="line"><span class="keyword">let</span> stringInstance = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;&quot;</span>, <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-泛型约束"><a href="#3-泛型约束" class="headerlink" title="3. 泛型约束"></a>3. 泛型约束</h2><h3 id="使用-extends-约束"><a href="#使用-extends-约束" class="headerlink" title="使用 extends 约束"></a>使用 extends 约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); <span class="comment">// 现在可以访问 .length 属性</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loggingIdentity</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 正常，字符串有 length 属性</span></span><br><span class="line"><span class="title function_">loggingIdentity</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 正常，数组有 length 属性</span></span><br><span class="line"><span class="comment">// loggingIdentity(3); // 错误，数字没有 length 属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多类型约束"><a href="#多类型约束" class="headerlink" title="多类型约束"></a>多类型约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> copyFields&lt;T <span class="keyword">extends</span> U, U&gt;(</span><br><span class="line">  <span class="attr">target</span>: T,</span><br><span class="line">  <span class="attr">source</span>: U</span><br><span class="line">): T &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> source) &#123;</span><br><span class="line">    target[id] = (source <span class="keyword">as</span> <span class="built_in">any</span>)[id];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="title function_">copyFields</span>(x, &#123; <span class="attr">b</span>: <span class="number">10</span>, <span class="attr">d</span>: <span class="number">20</span> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-泛型在类中的高级用法"><a href="#4-泛型在类中的高级用法" class="headerlink" title="4. 泛型在类中的高级用法"></a>4. 泛型在类中的高级用法</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型栈实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">items</span>: T[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">push</span>(<span class="attr">item</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">pop</span>(): T | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">peek</span>(): T | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> numberStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">numberStack.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">numberStack.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberStack.<span class="title function_">pop</span>()); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stringStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">stringStack.<span class="title function_">push</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">stringStack.<span class="title function_">push</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-泛型与接口结合"><a href="#5-泛型与接口结合" class="headerlink" title="5. 泛型与接口结合"></a>5. 泛型与接口结合</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">KeyValuePair</span>&lt;K, V&gt; &#123;</span><br><span class="line">  <span class="attr">key</span>: K;</span><br><span class="line">  <span class="attr">value</span>: V;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型接口</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">pair1</span>: <span class="title class_">KeyValuePair</span>&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt; = &#123; <span class="attr">key</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">&quot;one&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">pair2</span>: <span class="title class_">KeyValuePair</span>&lt;<span class="built_in">string</span>, <span class="built_in">boolean</span>&gt; = &#123; <span class="attr">key</span>: <span class="string">&quot;isValid&quot;</span>, <span class="attr">value</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型函数接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Transformer</span>&lt;T, U&gt; &#123;</span><br><span class="line">  (<span class="attr">input</span>: T): U;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">stringToNumber</span>: <span class="title class_">Transformer</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = <span class="function">(<span class="params">str</span>) =&gt;</span> <span class="built_in">parseInt</span>(str);</span><br><span class="line"><span class="keyword">const</span> <span class="attr">numberToString</span>: <span class="title class_">Transformer</span>&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt; = <span class="function">(<span class="params">num</span>) =&gt;</span> num.<span class="title function_">toString</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-条件类型与泛型"><a href="#6-条件类型与泛型" class="headerlink" title="6. 条件类型与泛型"></a>6. 条件类型与泛型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsString</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">IsString</span>&lt;<span class="built_in">string</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">IsString</span>&lt;<span class="built_in">number</span>&gt;; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件类型与泛型函数</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeName</span>&lt;T&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="string">&quot;string&quot;</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">number</span> ? <span class="string">&quot;number&quot;</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">boolean</span> ? <span class="string">&quot;boolean&quot;</span> :</span><br><span class="line">  <span class="string">&quot;object&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getTypeName&lt;T&gt;(<span class="attr">arg</span>: T): <span class="title class_">TypeName</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> arg <span class="keyword">as</span> <span class="title class_">TypeName</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title function_">getTypeName</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="keyword">const</span> result2 = <span class="title function_">getTypeName</span>(<span class="number">42</span>); <span class="comment">// &quot;number&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-泛型工具类型"><a href="#7-泛型工具类型" class="headerlink" title="7. 泛型工具类型"></a>7. 泛型工具类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Partial - 所有属性变为可选</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialUser</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;;</span><br><span class="line"><span class="comment">// 等价于 &#123; name?: string; age?: number; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Readonly - 所有属性变为只读</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyUser</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">User</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pick - 选择部分属性</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserName</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">User</span>, <span class="string">&quot;name&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Record - 创建对象类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PageInfo</span> = <span class="title class_">Record</span>&lt;<span class="string">&quot;home&quot;</span> | <span class="string">&quot;about&quot;</span> | <span class="string">&quot;contact&quot;</span>, &#123; <span class="attr">title</span>: <span class="built_in">string</span> &#125;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">pages</span>: <span class="title class_">PageInfo</span> = &#123;</span><br><span class="line">  <span class="attr">home</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;首页&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">about</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;关于&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">contact</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;联系&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-实际应用示例"><a href="#8-实际应用示例" class="headerlink" title="8. 实际应用示例"></a>8. 实际应用示例</h2><h3 id="API-响应处理"><a href="#API-响应处理" class="headerlink" title="API 响应处理"></a>API 响应处理</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">success</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">data</span>: T;</span><br><span class="line">  message?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟 API 调用</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> fetchData&lt;T&gt;(<span class="attr">url</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ApiResponse</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">  <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> userResponse = <span class="keyword">await</span> fetchData&lt;<span class="title class_">User</span>&gt;(<span class="string">&quot;/api/users/1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> productResponse = <span class="keyword">await</span> fetchData&lt;<span class="title class_">Product</span>&gt;(<span class="string">&quot;/api/products/1&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据处理工具"><a href="#数据处理工具" class="headerlink" title="数据处理工具"></a>数据处理工具</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataProcessor</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">data</span>: T[];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data: T[]</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">filter</span>(<span class="attr">predicate</span>: <span class="function">(<span class="params">item: T</span>) =&gt;</span> <span class="built_in">boolean</span>): <span class="title class_">DataProcessor</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataProcessor</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">filter</span>(predicate));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map&lt;U&gt;(<span class="attr">mapper</span>: <span class="function">(<span class="params">item: T</span>) =&gt;</span> U): <span class="title class_">DataProcessor</span>&lt;U&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataProcessor</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">map</span>(mapper));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(): T[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">DataProcessor</span>(numbers)</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> n &gt; <span class="number">2</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>)</span><br><span class="line">  .<span class="title function_">get</span>(); <span class="comment">// [6, 8, 10]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-泛型最佳实践"><a href="#9-泛型最佳实践" class="headerlink" title="9. 泛型最佳实践"></a>9. 泛型最佳实践</h2><ol><li><strong>使用有意义的泛型参数名</strong>：</li></ol>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的命名</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123; <span class="keyword">return</span> arg; &#125;</span><br><span class="line">  <span class="keyword">function</span> processData&lt;<span class="title class_">Input</span>, <span class="title class_">Output</span>&gt;(<span class="attr">input</span>: <span class="title class_">Input</span>): <span class="title class_">Output</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>适当使用约束</strong>：</li></ol>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要时使用约束</span></span><br><span class="line">  <span class="keyword">function</span> getProperty&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>避免过度使用泛型</strong>：只在真正需要灵活性时使用。</li></ol><p>泛型大大增强了 TypeScript 的类型安全性和代码重用性，是现代 TypeScript 开发中的重要特性。</p><p>希望这些信息能帮助您。如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;TypeScript 泛型（Generics）详解及示例&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="FrontEnd" scheme="https://xuehuayu.cn/categories/%E5%89%8D%E7%AB%AF/FrontEnd/"/>
    
    
    <category term="TypeScript" scheme="https://xuehuayu.cn/tags/TypeScript/"/>
    
    <category term="Generics" scheme="https://xuehuayu.cn/tags/Generics/"/>
    
    <category term="泛型" scheme="https://xuehuayu.cn/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于《新华字典》被指涉及“日本文化渗透”的问题</title>
    <link href="https://xuehuayu.cn/article/db0aa38a.html"/>
    <id>https://xuehuayu.cn/article/db0aa38a.html</id>
    <published>2025-10-21T08:41:30.000Z</published>
    <updated>2025-10-31T10:41:20.260Z</updated>
    
    <content type="html"><![CDATA[<p>关于《新华字典》被指涉及“日本文化渗透”的问题，目前法院已经作出了<strong>存在即合理</strong>的判决。这起事件在2023年底引起了广泛的社会讨论，主要围绕字典中部分内容的释义和举例是否恰当。</p><span id="more"></span><h3 id="先说重点，给孩子学习请使用《新华大字典》第3版。未被篡改。🔗京东自营"><a href="#先说重点，给孩子学习请使用《新华大字典》第3版。未被篡改。🔗京东自营" class="headerlink" title="先说重点，给孩子学习请使用《新华大字典》第3版。未被篡改。🔗京东自营"></a>先说重点，给孩子学习请使用《新华大字典》第3版。未被篡改。<a href="https://u.jd.com/BrjNdwS">🔗京东自营</a></h3><p>以下是整理的事件核心信息点：</p><ul><li><p>🗣️ <strong>主要争议点</strong>：起诉者认为《新华字典》中部分内容存在问题，</p><p>  例如对“倭”字的解释过于简单，未提及“倭寇”；以及“玩弄女性”、“孩子小，成了累赘”等组词和例句可能违反《出版管理条例》并产生不良价值引导。</p></li><li><p>📢 <strong>官方与专家回应</strong>：针对起诉，法律和语言学专家通过专业媒体进行了回应，认为上述指控是<strong>不成立的</strong>。他们的主要理由是：</p><ul><li>《新华字典》作为一本小型字典，核心功能是解释单字，历来未收录“倭寇”一词，该词在《现代汉语词典》等中型词典中一直有完整记载。</li><li>字典中收录的负面词语及例句，是为了客观反映语言现象，属于辞书编纂的常规做法，且相关举例均有语言使用实例（语料库）作为支撑。</li></ul></li></ul><h3 id="💎-总结"><a href="#💎-总结" class="headerlink" title="💎 总结"></a>💎 总结</h3><p>简单来说，这起事件是一起由个人发起并引发公众讨论的诉讼，目前法院已经作出了<strong>存在即合理</strong>的判决。针对主要的质疑点，官方和专家的解释倾向于认为这是对字典功能的误解。</p><p>如果你想了解此事最确切的进展，建议关注相关法院的官方信息发布或权威媒体的相关报道。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于《新华字典》被指涉及“日本文化渗透”的问题，目前法院已经作出了&lt;strong&gt;存在即合理&lt;/strong&gt;的判决。这起事件在2023年底引起了广泛的社会讨论，主要围绕字典中部分内容的释义和举例是否恰当。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>公众号迁移及费用详解</title>
    <link href="https://xuehuayu.cn/article/966ff763.html"/>
    <id>https://xuehuayu.cn/article/966ff763.html</id>
    <published>2025-10-21T08:41:04.000Z</published>
    <updated>2025-10-31T10:41:20.260Z</updated>
    
    <content type="html"><![CDATA[<p>进行公众号主体迁移需要准备必要的材料并遵循微信官方设定的流程，这一过程<strong>会涉及费用</strong>。下面将为你梳理详细的迁移步骤、相关费用以及一些重要的注意事项。</p><span id="more"></span><h1 id="📝-公众号迁移完整指南"><a href="#📝-公众号迁移完整指南" class="headerlink" title="📝 公众号迁移完整指南"></a>📝 公众号迁移完整指南</h1><h2 id="🔍-迁移流程一览"><a href="#🔍-迁移流程一览" class="headerlink" title="🔍 迁移流程一览"></a>🔍 迁移流程一览</h2><p>为了让你对公众号迁移有个全局把握，我整理了以下流程图，它涵盖了从准备到完成的所有关键阶段和任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    A[公众号迁移流程] --&gt; B[前期准备阶段]</span><br><span class="line">    A --&gt; C[线上操作阶段]</span><br><span class="line">    A --&gt; D[审核与确认阶段]</span><br><span class="line">    A --&gt; E[迁移执行阶段]</span><br><span class="line"></span><br><span class="line">    B --&gt; B1[确认目标账号资质]</span><br><span class="line">    B --&gt; B2[准备迁移材料]</span><br><span class="line">    B --&gt; B3[办理公证书]</span><br><span class="line"></span><br><span class="line">    B2 --&gt; B2_1[下载并填写迁移申请函]</span><br><span class="line">    B2 --&gt; B2_2[准备双方营业执照]</span><br><span class="line">    B2 --&gt; B2_3[准备法人身份证正反面]</span><br><span class="line"></span><br><span class="line">    B3 --&gt; B3_1[选择公证方式]</span><br><span class="line">    B3_1 --&gt; B3_1a[线上公证&lt;br&gt;1个工作日内]</span><br><span class="line">    B3_1 --&gt; B3_1b[线下公证&lt;br&gt;1-3个工作日]</span><br><span class="line"></span><br><span class="line">    C --&gt; C1[原账号后台发起迁移]</span><br><span class="line">    C --&gt; C2[原管理员扫码确认协议]</span><br><span class="line">    C --&gt; C3[输入目标账号ID验证]</span><br><span class="line">    C --&gt; C4[选择迁移内容]</span><br><span class="line">    C --&gt; C5[确认新账号名称]</span><br><span class="line">    C --&gt; C6[填写发票信息]</span><br><span class="line">    C --&gt; C7[支付300元审核费]</span><br><span class="line"></span><br><span class="line">    D --&gt; D1[等待官方审核&lt;br&gt;1-3个工作日]</span><br><span class="line">    D --&gt; D2[双方管理员确认迁移]</span><br><span class="line"></span><br><span class="line">    E --&gt; E1[原账号冻结]</span><br><span class="line">    E --&gt; E2[粉丝1天内确认是否取关]</span><br><span class="line">    E --&gt; E3[数据迁移&lt;br&gt;1-3天完成]</span><br><span class="line">    E --&gt; E4[原账号回收]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="📋-迁移前的准备工作"><a href="#📋-迁移前的准备工作" class="headerlink" title="📋 迁移前的准备工作"></a>📋 迁移前的准备工作</h2><p>在开始迁移前，你需要确保满足以下条件并准备好相应材料：</p><h3 id="账号资质要求"><a href="#账号资质要求" class="headerlink" title="账号资质要求"></a>账号资质要求</h3><ul><li><strong>原账号A</strong>：必须是验证过主体信息的订阅号或服务号，包括已完成小额打款验证、法定代表人验证或微信认证成功的组织类账号，以及注册成功的个人账号。</li><li><strong>目标账号B</strong>：必须是<strong>组织类账号</strong>（企业或个体工商户），并完成主体验证。<strong>个人公众号不能作为目标账号</strong>。</li></ul><h3 id="必备材料清单"><a href="#必备材料清单" class="headerlink" title="必备材料清单"></a>必备材料清单</h3><ol><li><strong>公众号迁移申请函</strong>：从微信公众平台下载模板，填写双方账号信息并加盖公章。</li><li><strong>公证书</strong>：由合法公证处出具，证明迁移申请函真实有效。</li><li><strong>其他材料</strong>：</li></ol><ul><li>双方主体的营业执照或组织机构代码证</li><li>法人身份证正反面照片</li><li>双方账号后台设置截图</li></ul><h3 id="公证书办理指南"><a href="#公证书办理指南" class="headerlink" title="公证书办理指南"></a>公证书办理指南</h3><p>公证书是迁移过程中的关键材料，你有两种办理方式：</p><ul><li><p><strong>线上办理</strong>（推荐）：</p><ul><li>通过”一点证”或”信息产权”等微信公众号办理</li><li>全程线上操作，约<strong>1个工作日内</strong>完成</li><li>无需法人到场，费用约为线下的一半</li><li>需上传营业执照、法人身份证、公众号后台截图等电子材料</li></ul></li><li><p><strong>线下办理</strong>：</p><ul><li>携带材料前往当地公证处</li><li>通常需要<strong>1-3个工作日</strong></li><li>费用约<strong>600-1000元</strong></li><li>部分公证处可能要求法人亲自到场</li></ul></li></ul><h2 id="💰-迁移费用详解"><a href="#💰-迁移费用详解" class="headerlink" title="💰 迁移费用详解"></a>💰 迁移费用详解</h2><p>公众号迁移涉及以下费用：</p><ol><li><strong>官方审核费</strong>：<strong>300元</strong>，支付给腾讯。此为审核服务费，<strong>无论迁移成功与否，均不退还</strong>。</li><li><strong>公证书办理费</strong>：根据办理方式不同，约<strong>0-1000元</strong>不等。</li><li><strong>第三方服务费</strong>（若委托）：如找第三方机构代办，可能额外收取服务费。</li></ol><h2 id="⚠️-重要注意事项"><a href="#⚠️-重要注意事项" class="headerlink" title="⚠️ 重要注意事项"></a>⚠️ 重要注意事项</h2><p>迁移前请了解以下关键点：</p><ol><li><strong>可迁移与不可迁移内容</strong>：</li></ol><ul><li><strong>可迁移</strong>：粉丝、文章素材、微信号（可选）、留言功能（如有）、违规记录</li><li><strong>不可迁移</strong>：菜单栏、自动回复、头像、流量主&#x2F;广告主权益、微信支付等功能，需在目标账号重新设置</li></ul><ol start="2"><li><p><strong>迁移耗时</strong>：整个流程约<strong>7-10天</strong>完成，具体取决于公证、审核等环节。</p></li><li><p><strong>粉丝通知</strong>：迁移确认后，原账号粉丝会收到迁移通知，有<strong>1天时间</strong>决定是否继续关注。</p></li><li><p><strong>账号处理</strong>：迁移完成后，原账号被<strong>冻结回收</strong>，目标账号继承所有选择的资源。</p></li><li><p><strong>审核机会</strong>：审核过程中，30天内有<strong>3次补充或重填机会</strong>，请及时关注平台通知。</p></li></ol><h2 id="💡-迁移实用建议"><a href="#💡-迁移实用建议" class="headerlink" title="💡 迁移实用建议"></a>💡 迁移实用建议</h2><ul><li><strong>提前备份</strong>：即使文章素材可以迁移，建议提前备份重要数据。</li><li><strong>粉丝沟通</strong>：迁移前可通过群发消息告知粉丝，减少因不知情而取关。</li><li><strong>时间规划</strong>：避开月初、月底或营销活动期进行迁移，尽量减少对运营的影响。</li><li><strong>资料保护</strong>：给营业执照和身份证照片添加”仅供公众号迁移使用”水印，防止滥用。</li></ul><p>希望这份指南能帮你顺利完成公众号迁移。 如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;进行公众号主体迁移需要准备必要的材料并遵循微信官方设定的流程，这一过程&lt;strong&gt;会涉及费用&lt;/strong&gt;。下面将为你梳理详细的迁移步骤、相关费用以及一些重要的注意事项。&lt;/p&gt;</summary>
    
    
    
    <category term="公众号" scheme="https://xuehuayu.cn/categories/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    
    <category term="公众号" scheme="https://xuehuayu.cn/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    <category term="迁移" scheme="https://xuehuayu.cn/tags/%E8%BF%81%E7%A7%BB/"/>
    
    <category term="费用" scheme="https://xuehuayu.cn/tags/%E8%B4%B9%E7%94%A8/"/>
    
    <category term="流程" scheme="https://xuehuayu.cn/tags/%E6%B5%81%E7%A8%8B/"/>
    
    <category term="步骤" scheme="https://xuehuayu.cn/tags/%E6%AD%A5%E9%AA%A4/"/>
    
  </entry>
  
  <entry>
    <title>孩子能不能喝酸奶，什么时候喝比较好？酸奶饮用全攻略：从成人到幼儿，一文读懂！</title>
    <link href="https://xuehuayu.cn/article/72256181.html"/>
    <id>https://xuehuayu.cn/article/72256181.html</id>
    <published>2025-10-14T10:09:36.000Z</published>
    <updated>2025-10-31T10:41:20.258Z</updated>
    
    <content type="html"><![CDATA[<p>酸奶饮用全攻略：从成人到幼儿，一文读懂！这将是一份全面且针对不同年龄段的酸奶饮用指南。</p><span id="more"></span><h3 id="酸奶饮用全攻略：从成人到幼儿，一文读懂"><a href="#酸奶饮用全攻略：从成人到幼儿，一文读懂" class="headerlink" title="酸奶饮用全攻略：从成人到幼儿，一文读懂"></a><strong>酸奶饮用全攻略：从成人到幼儿，一文读懂</strong></h3><p>酸奶作为一种营养丰富的健康食品，无论是对于成年人还是成长中的幼儿，都是饮食中的优秀选择。然而，不同年龄段和不同目标的人群，喝酸奶的讲究也各不相同。</p><h4 id="第一部分：通用指南——你什么时候喝酸奶？"><a href="#第一部分：通用指南——你什么时候喝酸奶？" class="headerlink" title="第一部分：通用指南——你什么时候喝酸奶？"></a><strong>第一部分：通用指南——你什么时候喝酸奶？</strong></h4><p>对大多数人来说，喝酸奶没有绝对的“禁区”，但在特定时间喝，能更好地实现你的目标。</p><ul><li><p><strong>作为营养早餐</strong>：搭配全麦面包、燕麦或水果，可提供优质蛋白和持久饱腹感。建议先吃点东西再喝，避免完全空腹。</p></li><li><p><strong>作为午后加餐（下午3-4点）</strong>：快速补充能量，缓解饥饿与疲劳，帮助您以更好的状态投入后续工作，并避免晚餐暴食。</p></li><li><p><strong>作为运动搭档</strong>：</p><ul><li><strong>运动后（半小时内）</strong>：这是<strong>黄金时间</strong>。身体急需蛋白质和碳水化合物来修复肌肉和恢复能量，酸奶（特别是希腊酸奶）是完美选择。</li></ul></li><li><p><strong>作为助眠宵夜</strong>：</p><ul><li><strong>睡前1-2小时</strong>：酸奶中的蛋白质能缓慢释放氨基酸，助肌肉修复；钙质有助于放松神经。<strong>务必选择无糖酸奶</strong>，并记得刷牙。</li></ul></li><li><p><strong>作为消化助手</strong>：</p><ul><li><strong>饭后半小时到1小时</strong>：胃酸被食物稀释，有利于乳酸菌存活并到达肠道，从而助消化、调节菌群。</li></ul></li></ul><p><strong>需要注意的时间</strong>：<strong>空腹时</strong>。对于肠胃敏感、胃酸过多者，空腹喝可能引起不适。</p><hr><h4 id="第二部分：核心关键——如何选择一款健康的酸奶？"><a href="#第二部分：核心关键——如何选择一款健康的酸奶？" class="headerlink" title="第二部分：核心关键——如何选择一款健康的酸奶？"></a><strong>第二部分：核心关键——如何选择一款健康的酸奶？</strong></h4><p>选择比时间更重要！无论您何时喝，选对酸奶是健康的前提。请学会看标签：</p><ol><li><p><strong>看配料表：越短越好</strong></p><ul><li><strong>黄金标准</strong>：只有 <strong>“生牛乳+发酵菌”</strong>。</li><li><strong>尽量避免</strong>：含有“白砂糖、果葡糖浆、浓缩果汁、阿斯巴甜、香精”等复杂配方的产品。</li></ul></li><li><p><strong>看产品类型：认准“发酵乳”</strong></p><ul><li><strong>首选【发酵乳】</strong>：成分纯粹。</li><li><strong>慎选【风味发酵乳】</strong>：这类产品允许添加其他成分，糖和添加剂的风险较高，需仔细甄别。</li></ul></li><li><p><strong>看营养成分表：抓住三要素</strong></p><ul><li><strong>低碳水化合物（糖）</strong>：<strong>&lt; 6g&#x2F;100g** 是优质无糖酸奶的标志。**&gt;10g&#x2F;100g</strong> 则含糖较多，不推荐。</li><li><strong>高蛋白质</strong>：<strong>≥ 2.9g&#x2F;100g</strong>（越高越好，希腊酸奶更佳）。</li><li><strong>全脂</strong>：对于儿童及非减脂需求的成人，全脂酸奶能提供更全面的营养和饱腹感。</li></ul></li></ol><hr><h4 id="第三部分：特别关注——2-3岁幼儿喝酸奶全指南"><a href="#第三部分：特别关注——2-3岁幼儿喝酸奶全指南" class="headerlink" title="第三部分：特别关注——2-3岁幼儿喝酸奶全指南"></a><strong>第三部分：特别关注——2-3岁幼儿喝酸奶全指南</strong></h4><p><strong>答案是可以，而且非常推荐！</strong> 酸奶质地柔软、营养丰富，是幼儿的理想零食。但给幼儿喝需要格外谨慎。</p><p><strong>为什么好？</strong></p><ul><li><strong>营养密集</strong>：提供幼儿发育所需的优质蛋白、钙、磷和维生素。</li><li><strong>有益肠道</strong>：乳酸菌有助于建立健康的肠道菌群。</li><li><strong>乳糖友好</strong>：发酵过程分解了大部分乳糖，适合对牛奶不耐受的宝宝。</li></ul><p><strong>如何为幼儿挑选？——标准更严格！</strong></p><ul><li><strong>配料表首位</strong>：必须是 <strong>“生牛乳”</strong> ，且配料表极其简短。</li><li><strong>无糖是铁律</strong>：严格选择<strong>碳水化合物含量 &lt; 6g&#x2F;100g</strong> 的产品。额外添加的糖对幼儿有害无益。</li><li><strong>选择全脂</strong>：幼儿大脑发育需要脂肪，请务必选择全脂酸奶。</li></ul><p><strong>如何喂食？</strong></p><ul><li><strong>初次尝试</strong>：从一小勺开始，观察2-3天，确认无过敏（如皮疹、腹泻）后再正常添加。</li><li><strong>食用量与时间</strong>：每天<strong>100-150克</strong>为宜，可作为上下午的<strong>健康加餐</strong>，但不能替代配方奶或牛奶。</li><li><strong>改善口味</strong>：如果孩子嫌酸，可以<strong>自制添加</strong>天然水果泥（如香蕉泥、草莓泥）或少量坚果粉（确保不过敏）。</li><li><strong>口腔卫生</strong>：喝完酸奶后务必让孩子喝水或漱口，并清洁牙齿，预防蛀牙。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>对成人</strong>：将酸奶融入您一日三餐或运动计划中，根据您的健康目标选择合适的时间。</li><li><strong>对幼儿</strong>：酸奶是绝佳的零食，但<strong>无糖、配料干净</strong>是不可妥协的原则。</li><li><strong>对所有人</strong>：<strong>养成喝健康酸奶的习惯，远比纠结于饮用时间更重要。</strong> 学会阅读食品标签，是您和家人享受酸奶健康益处的最佳保障。</li></ul><h3 id="感兴趣"><a href="#感兴趣" class="headerlink" title="感兴趣"></a><strong>感兴趣</strong></h3><ul><li><a href="/article/63232801">孩子总是想喝盐水好不好</a></li><li><a href="/article/5fc82f4a">奶贝贝与奶糖的区别解析，给孩子吃哪个好？</a></li></ul><p>希望这些信息能帮助您。如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;酸奶饮用全攻略：从成人到幼儿，一文读懂！这将是一份全面且针对不同年龄段的酸奶饮用指南。&lt;/p&gt;</summary>
    
    
    
    <category term="儿童" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/"/>
    
    <category term="健康" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/"/>
    
    <category term="children" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/children/"/>
    
    <category term="health" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/children/health/"/>
    
    
    <category term="儿童" scheme="https://xuehuayu.cn/tags/%E5%84%BF%E7%AB%A5/"/>
    
    <category term="children" scheme="https://xuehuayu.cn/tags/children/"/>
    
    <category term="酸奶" scheme="https://xuehuayu.cn/tags/%E9%85%B8%E5%A5%B6/"/>
    
    <category term="Yogurt" scheme="https://xuehuayu.cn/tags/Yogurt/"/>
    
  </entry>
  
  <entry>
    <title>新生儿医疗保险怎么交-城乡居民医疗保险缴费</title>
    <link href="https://xuehuayu.cn/article/1edb13da.html"/>
    <id>https://xuehuayu.cn/article/1edb13da.html</id>
    <published>2025-10-14T09:46:25.000Z</published>
    <updated>2025-10-31T10:41:20.259Z</updated>
    
    <content type="html"><![CDATA[<p>城乡居民医保缴费的详细信息：</p><span id="more"></span><table><thead><tr><th align="left">事项</th><th align="left">具体内容</th></tr></thead><tbody><tr><td align="left"><strong>缴费年度</strong></td><td align="left">2026年度</td></tr><tr><td align="left"><strong>集中缴费期</strong></td><td align="left"><strong>2025年9月25日 - 2025年12月31日</strong></td></tr><tr><td align="left"><strong>个人缴费标准</strong></td><td align="left"><strong>400元&#x2F;人&#x2F;年</strong></td></tr><tr><td align="left"><strong>医保待遇享受期</strong></td><td align="left">2026年1月1日 - 2026年12月31日</td></tr><tr><td align="left"><strong>主要缴费渠道</strong></td><td align="left">微信、云闪付、支付宝、协作银行手机APP等</td></tr></tbody></table><h3 id="💰-关于缴费标准的补充说明"><a href="#💰-关于缴费标准的补充说明" class="headerlink" title="💰 关于缴费标准的补充说明"></a>💰 关于缴费标准的补充说明</h3><p>对于特困人员、孤儿等特殊群体，政府会提供全额或定额资助 ：</p><ul><li><strong>全额资助</strong>：特困人员、孤儿、事实无人抚养儿童，个人无需缴费。</li><li><strong>定额资助</strong>：低保对象、脱贫人口、重度残疾人员等，个人只需缴纳<strong>160元</strong>。</li></ul><h3 id="👶-新生儿参保提醒"><a href="#👶-新生儿参保提醒" class="headerlink" title="👶 新生儿参保提醒"></a>👶 新生儿参保提醒</h3><p>如果您家中有新生儿，请注意：</p><ul><li>新生儿应在出生后<strong>90天内</strong>参加居民医保 。</li><li>缴纳个人部分（400元）后，医保待遇可从<strong>出生之日</strong>起开始享受 。</li></ul><h3 id="⚠️-重要提醒：切勿错过集中缴费期"><a href="#⚠️-重要提醒：切勿错过集中缴费期" class="headerlink" title="⚠️ 重要提醒：切勿错过集中缴费期"></a>⚠️ 重要提醒：切勿错过集中缴费期</h3><ul><li></li></ul><p><strong>及时缴费</strong>：强烈建议在<strong>2025年12月31日</strong>前的集中缴费期内完成缴费。如果错过，后续补缴可能无法享受财政补助，并且需要自行承担更高的费用（个人缴费+政府补助部分，总额预计不低于1070元）。</p><ul><li><strong>待遇等待期</strong>：逾期缴费可能会有<strong>不低于3个月的待遇等待期</strong>，等待期内无法享受医保报销，这将带来不小的保障空窗期 。</li></ul><h3 id="💡-参保与缴费建议"><a href="#💡-参保与缴费建议" class="headerlink" title="💡 参保与缴费建议"></a>💡 参保与缴费建议</h3><ul><li>为确保顺利参保并享受医保待遇，请务必在<strong>2025年12月31日</strong>前的集中缴费期内完成2026年度医保费用的缴纳。</li><li>如果对参保流程或自身情况有疑问，例如不确定属于哪类参保群体或需要确认缴费是否成功，可以拨打医保服务电话进行咨询 。</li></ul><p>希望这些信息能帮助您。如果还有其他想了解的，随时可以留言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;城乡居民医保缴费的详细信息：&lt;/p&gt;</summary>
    
    
    
    <category term="儿童" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/"/>
    
    <category term="健康" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/"/>
    
    <category term="children" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/children/"/>
    
    <category term="health" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/children/health/"/>
    
    
    <category term="儿童" scheme="https://xuehuayu.cn/tags/%E5%84%BF%E7%AB%A5/"/>
    
    <category term="children" scheme="https://xuehuayu.cn/tags/children/"/>
    
    <category term="医疗保险" scheme="https://xuehuayu.cn/tags/%E5%8C%BB%E7%96%97%E4%BF%9D%E9%99%A9/"/>
    
    <category term="Medical insurance" scheme="https://xuehuayu.cn/tags/Medical-insurance/"/>
    
  </entry>
  
  <entry>
    <title>The Difference Between &#39;Nai Bei Bei&#39; and Milk Candy</title>
    <link href="https://xuehuayu.cn/article/6718f68c.html"/>
    <id>https://xuehuayu.cn/article/6718f68c.html</id>
    <published>2025-10-07T15:36:53.000Z</published>
    <updated>2025-10-31T10:41:20.253Z</updated>
    
    <content type="html"><![CDATA[<p>The Difference Between “Nai Bei Bei” and Milk Candy</p><span id="more"></span><p>Simply put, the main difference is:</p><ul><li><strong>Nai Bei Bei</strong> : Typically refers to a **nutritious snack for infants and</li></ul><p>toddlers**, most commonly in the form of <strong>yogurt melts</strong> or milk pellets. Its<br>core focus is <strong>nutrition, easy dissolution, and suitability for babies</strong>.</p><ul><li><strong>Milk Candy</strong>: Refers to a major category of <strong>candy</strong>, like White Rabbit</li></ul><p>Creamy Candy. Its core focus is being a <strong>sweet treat or snack</strong>.</p><p>Here is a clear comparison table and detailed explanation:</p><h3 id="Core-Differences-Comparison-Table"><a href="#Core-Differences-Comparison-Table" class="headerlink" title="Core Differences Comparison Table"></a>Core Differences Comparison Table</h3><table><thead><tr><th align="left">Aspect</th><th align="left">Nai Bei Bei</th><th align="left">Milk Candy</th></tr></thead><tbody><tr><td align="left"><strong>Product Category</strong></td><td align="left"><strong>Infant &amp; Toddler Nutritious Snack, Complementary Food</strong></td><td align="left"><strong>Candy, Snack Food</strong></td></tr><tr><td align="left"><strong>Main Ingredients</strong></td><td align="left">Yogurt, milk, fruit puree, probiotics, vitamins, etc.; <strong>low or no added sugar</strong>.</td><td align="left">White sugar, glucose syrup, hydrogenated vegetable oil, milk powder, flavorings, etc.; <strong>high sugar, high fat</strong>.</td></tr><tr><td align="left"><strong>Texture &amp; Sensation</strong></td><td align="left">Small pellets or melts; <strong>dissolves easily in the mouth</strong> to prevent choking.</td><td align="left">Solid hard or chewy candy; <strong>requires chewing</strong>; has resilience and chewiness.</td></tr><tr><td align="left"><strong>Target Audience</strong></td><td align="left"><strong>Infants &amp; Toddlers</strong> (usually babies 6 months and older)</td><td align="left"><strong>Children &amp; Adults</strong></td></tr><tr><td align="left"><strong>Primary Function</strong></td><td align="left"><strong>Nutritional supplementation, practicing fine motor skills, soothing</strong></td><td align="left"><strong>Providing sweet flavor enjoyment, casual snacking</strong></td></tr><tr><td align="left"><strong>Health Considerations</strong></td><td align="left">Focus on health, natural ingredients, no additives; <strong>very low sugar content</strong>.</td><td align="left"><strong>High sugar, high calorie</strong>; can easily cause tooth decay and obesity; not suitable for infants&#x2F;toddlers.</td></tr></tbody></table><hr><h3 id="Detailed-Explanation"><a href="#Detailed-Explanation" class="headerlink" title="Detailed Explanation"></a>Detailed Explanation</h3><h4 id="1-Nai-Bei-Bei"><a href="#1-Nai-Bei-Bei" class="headerlink" title="1. Nai Bei Bei"></a>1. Nai Bei Bei</h4><p>The name “Nai Bei Bei” sounds cute and is often a product name used by merchants<br>to attract parents and babies.</p><ul><li><strong>Typical Example</strong>: <strong>Infant yogurt melts</strong>. This is a very popular baby</li></ul><p>snack.</p><ul><li><p><strong>Why it’s popular</strong>:</p><ul><li><strong>Easy Dissolution</strong>: Melts quickly upon contact with saliva, significantly reducing the risk of choking for small babies.</li><li><strong>Nutrient Fortified</strong>: Often fortified with probiotics, Vitamin D, calcium, and other nutrients essential for infant growth.</li><li><strong>Skill Development</strong>: The small shape is perfect for babies to practice the pincer grasp (fine motor skill).</li><li><strong>Natural Flavor</strong>: Usually flavored with real fruit puree, containing little to no added sugar, salt, artificial flavors, or preservatives.</li></ul></li></ul><p><strong>Summary: Nai Bei Bei is a healthy snack specifically designed for infants and<br>toddlers, combining nutrition and functionality.</strong></p><h4 id="2-Milk-Candy"><a href="#2-Milk-Candy" class="headerlink" title="2. Milk Candy"></a>2. Milk Candy</h4><p>“Milk Candy” is a traditional and broad category of candy, characterized by its<br>rich milky flavor.</p><ul><li><p><strong>Typical Examples</strong>: <strong>White Rabbit Creamy Candy, Wangzai Milk Candy</strong>.</p></li><li><p><strong>Characteristics</strong>:</p><ul><li><strong>High Sugar Content</strong>: Primarily made of sugar, providing a strong sweet taste.</li><li><strong>Requires Chewing</strong>: Firm or chewy texture, not suitable for infants with underdeveloped swallowing skills.</li><li><strong>Additives</strong>: May contain artificial flavors, colors, and hydrogenated vegetable oil (which may contain trans fats) used to maintain texture.</li><li><strong>Risks</strong>: Poses a <strong>choking hazard</strong> for babies, and the high sugar content is detrimental to dental health and developing healthy eating habits.</li></ul></li></ul><p><strong>Summary: Milk Candy is a standard confectionery product, categorized as a<br>casual snack, and is not recommended for children under 3 years old.</strong></p><hr><h3 id="Advice-for-Parents"><a href="#Advice-for-Parents" class="headerlink" title="Advice for Parents"></a>Advice for Parents</h3><ul><li>**When buying snacks for your baby, always carefully check the “Product</li></ul><p>Category” and “Suitable Age” on the packaging.** Legitimate “Nai Bei Bei”<br>(yogurt melts) will clearly be labeled as “Infant and Young Child Supplementary<br>Food” and indicate the appropriate age (e.g., 6M+, 8M+).</p><ul><li><strong>Check the Ingredient List</strong>: Snacks for babies should have a short, clean</li></ul><p>ingredient list. The first items should be natural ingredients like milk,<br>yogurt, fruit, rather than sugar, glucose syrup, etc.</p><ul><li><strong>Never substitute or feed adult milk candy to babies.</strong> They are</li></ul><p>fundamentally different and pose safety risks.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;The Difference Between “Nai Bei Bei” and Milk Candy&lt;/p&gt;</summary>
    
    
    
    <category term="儿童" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/"/>
    
    <category term="健康" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/"/>
    
    <category term="children" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/children/"/>
    
    <category term="health" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/children/health/"/>
    
    
    <category term="Nai Bei Bei" scheme="https://xuehuayu.cn/tags/Nai-Bei-Bei/"/>
    
    <category term="Milk Candy" scheme="https://xuehuayu.cn/tags/Milk-Candy/"/>
    
    <category term="Difference" scheme="https://xuehuayu.cn/tags/Difference/"/>
    
  </entry>
  
  <entry>
    <title>奶贝贝与奶糖的区别解析</title>
    <link href="https://xuehuayu.cn/article/5fc82f4a.html"/>
    <id>https://xuehuayu.cn/article/5fc82f4a.html</id>
    <published>2025-10-07T15:32:43.000Z</published>
    <updated>2025-10-31T10:41:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>“奶贝贝”和“奶糖”虽然听起来有点像，但它们通常指代两种不同的产品。</p><span id="more"></span><p>简单来说，最主要的区别是：</p><ul><li><strong>奶贝贝</strong>：通常指的是一种<strong>婴幼儿营养零食</strong>，最常见的形式是<strong>酸奶溶豆</strong>或<strong>奶粒</strong>。它的核心是<strong>营养、易溶解、适合小宝宝</strong>。</li><li><strong>奶糖</strong>：指的是<strong>糖果</strong>的一个大类，比如大白兔奶糖。它的核心是<strong>糖果、甜食、休闲零食</strong>。</li></ul><p>下面我们用一个清晰的表格和详细说明来对比：</p><h3 id="核心区别对比表"><a href="#核心区别对比表" class="headerlink" title="核心区别对比表"></a>核心区别对比表</h3><table><thead><tr><th align="left">对比维度</th><th align="left">奶贝贝</th><th align="left">奶糖</th></tr></thead><tbody><tr><td align="left"><strong>产品类别</strong></td><td align="left"><strong>婴幼儿营养零食、辅食</strong></td><td align="left"><strong>糖果、休闲食品</strong></td></tr><tr><td align="left"><strong>主要成分</strong></td><td align="left">酸奶、牛奶、水果泥、益生菌、维生素等，<strong>少糖或无添加糖</strong>。</td><td align="left">白砂糖、葡萄糖浆、氢化植物油、奶粉、香精等，<strong>高糖、高油</strong>。</td></tr><tr><td align="left"><strong>形态口感</strong></td><td align="left">多为小颗粒、溶豆状，<strong>入口即化</strong>，防止宝宝噎呛。</td><td align="left">多为固体硬糖或软糖，<strong>需要咀嚼</strong>，有韧性和嚼劲。</td></tr><tr><td align="left"><strong>目标人群</strong></td><td align="left"><strong>婴幼儿</strong>（通常是6个月以上的宝宝）</td><td align="left"><strong>儿童及成人</strong></td></tr><tr><td align="left"><strong>核心功能</strong></td><td align="left"><strong>补充营养、锻炼抓握能力、安抚</strong></td><td align="left"><strong>提供甜味享受、休闲解馋</strong></td></tr><tr><td align="left"><strong>健康考量</strong></td><td align="left">注重健康、天然、无添加，<strong>含糖量极低</strong>。</td><td align="left"><strong>高糖、高热量</strong>，容易导致蛀牙、肥胖，不适合婴幼儿。</td></tr></tbody></table><hr><h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><h4 id="1-奶贝贝"><a href="#1-奶贝贝" class="headerlink" title="1. 奶贝贝"></a>1. 奶贝贝</h4><p>“奶贝贝”这个名字听起来就很可爱，通常是商家为了吸引宝妈和宝宝而起的商品名。</p><ul><li><p><strong>典型代表</strong>：<strong>婴幼儿酸奶溶豆</strong>。这是一种非常流行的宝宝零食。</p></li><li><p><strong>为什么受欢迎</strong>：</p><ul><li><strong>易溶解</strong>：遇到口水会迅速融化，极大降低了小宝宝（尤其是还没长牙或刚长牙的宝宝）噎住的风险。</li><li><strong>营养强化</strong>：通常会添加益生菌、维生素D、钙等婴幼儿成长所需的营养素。</li><li><strong>锻炼能力</strong>：小巧的形状非常适合宝宝练习“拇指和食指对捏”的精细动作。</li><li><strong>口味天然</strong>：通常使用真实水果泥调味，不含或极少含添加糖、盐、香精、防腐剂。</li></ul></li></ul><p><strong>总结：奶贝贝是专门为婴幼儿设计的、兼具营养和功能性的健康零食。</strong></p><h4 id="2-奶糖"><a href="#2-奶糖" class="headerlink" title="2. 奶糖"></a>2. 奶糖</h4><p>“奶糖”是一个传统且广泛的糖果类别，它的主要特点就是有浓郁的奶香味。</p><ul><li><p><strong>典型代表</strong>：<strong>大白兔奶糖、旺仔牛奶糖</strong>等。</p></li><li><p><strong>特点</strong>：</p><ul><li><strong>高糖高甜</strong>：主要成分是糖，提供强烈的甜味体验。</li><li><strong>需要咀嚼</strong>：质地较硬或有嚼劲，不适合吞咽功能不完善的婴幼儿。</li><li><strong>添加剂</strong>：可能含有香精、色素以及为了保持口感而使用的氢化植物油（可能含反式脂肪酸）。</li><li><strong>风险</strong>：对宝宝来说，有<strong>窒息风险</strong>，并且高糖分对牙齿健康和养成清淡饮食习惯非常不利。</li></ul></li></ul><p><strong>总结：奶糖是标准的糖果，属于休闲食品，不建议给3岁以下的婴幼儿食用。</strong></p><hr><h3 id="给宝爸宝妈的建议"><a href="#给宝爸宝妈的建议" class="headerlink" title="给宝爸宝妈的建议"></a>给宝爸宝妈的建议</h3><ul><li></li></ul><p><strong>在给宝宝购买零食时，一定要仔细查看产品包装上的“产品类别”和“适用年龄”</strong>。正规的“奶贝贝”（酸奶溶豆）会明确标注是“婴幼儿辅助食品”以及适合的月龄（如6M+，8M+等）。</p><ul><li><strong>看配料表</strong>：给宝宝吃的零食，配料表应该尽可能简短、干净，排在前几位的最好是牛奶、酸奶、水果等天然成分，而不是白砂糖、葡萄糖浆等。</li><li><strong>千万不要用成人的奶糖来替代或喂给小宝宝</strong>，两者有本质区别，存在安全隐患。</li></ul><p>希望这个详细的解释能帮助您完全分清“奶贝贝”和“奶糖”的区别！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;“奶贝贝”和“奶糖”虽然听起来有点像，但它们通常指代两种不同的产品。&lt;/p&gt;</summary>
    
    
    
    <category term="儿童" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/"/>
    
    <category term="健康" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/"/>
    
    <category term="children" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/children/"/>
    
    <category term="health" scheme="https://xuehuayu.cn/categories/%E5%84%BF%E7%AB%A5/%E5%81%A5%E5%BA%B7/children/health/"/>
    
    
    <category term="奶贝贝" scheme="https://xuehuayu.cn/tags/%E5%A5%B6%E8%B4%9D%E8%B4%9D/"/>
    
    <category term="奶糖" scheme="https://xuehuayu.cn/tags/%E5%A5%B6%E7%B3%96/"/>
    
    <category term="区别" scheme="https://xuehuayu.cn/tags/%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
</feed>
